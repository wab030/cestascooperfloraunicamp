{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { Platform } from '@unimodules/core';\nimport { v4 as uuidv4 } from 'uuid';\nexport default {\n  get name() {\n    return 'ExpoDocumentPicker';\n  },\n\n  getDocumentAsync: function getDocumentAsync(_ref) {\n    var _ref$type, type, _ref$multiple, multiple, input;\n\n    return _regeneratorRuntime.async(function getDocumentAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _ref$type = _ref.type, type = _ref$type === void 0 ? '*/*' : _ref$type, _ref$multiple = _ref.multiple, multiple = _ref$multiple === void 0 ? false : _ref$multiple;\n\n            if (Platform.isDOMAvailable) {\n              _context.next = 3;\n              break;\n            }\n\n            return _context.abrupt(\"return\", {\n              type: 'cancel'\n            });\n\n          case 3:\n            input = document.createElement('input');\n            input.style.display = 'none';\n            input.setAttribute('type', 'file');\n            input.setAttribute('accept', type);\n            input.setAttribute('id', uuidv4());\n\n            if (multiple) {\n              input.setAttribute('multiple', 'multiple');\n            }\n\n            document.body.appendChild(input);\n            return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n              input.addEventListener('change', function () {\n                if (input.files) {\n                  var targetFile = input.files[0];\n                  var reader = new FileReader();\n\n                  reader.onerror = function () {\n                    reject(new Error(\"Failed to read the selected media because the operation failed.\"));\n                  };\n\n                  reader.onload = function (_ref2) {\n                    var target = _ref2.target;\n                    var uri = target.result;\n                    resolve({\n                      type: 'success',\n                      uri: uri,\n                      name: targetFile.name,\n                      file: targetFile,\n                      lastModified: targetFile.lastModified,\n                      size: targetFile.size,\n                      output: input.files\n                    });\n                  };\n\n                  reader.readAsDataURL(targetFile);\n                } else {\n                  resolve({\n                    type: 'cancel'\n                  });\n                }\n\n                document.body.removeChild(input);\n              });\n              var event = new MouseEvent('click');\n              input.dispatchEvent(event);\n            }));\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n};","map":{"version":3,"sources":["../src/ExpoDocumentPicker.web.ts"],"names":[],"mappings":";AAAA,SAAS,QAAT,QAAyB,kBAAzB;AACA,SAAS,EAAE,IAAI,MAAf,QAA6B,MAA7B;AAIA,eAAe;AACb,MAAI,IAAJ,GAAQ;AACN,WAAO,oBAAP;AACD,GAHY;;AAKP,EAAA,gBALO;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,6BAMX,IANW,EAMX,IANW,0BAMJ,KANI,mCAOX,QAPW,EAOX,QAPW,8BAOA,KAPA;;AAAA,gBAUN,QAAQ,CAAC,cAVH;AAAA;AAAA;AAAA;;AAAA,6CAWF;AAAE,cAAA,IAAI,EAAE;AAAR,aAXE;;AAAA;AAcL,YAAA,KAdK,GAcG,QAAQ,CAAC,aAAT,CAAuB,OAAvB,CAdH;AAeX,YAAA,KAAK,CAAC,KAAN,CAAY,OAAZ,GAAsB,MAAtB;AACA,YAAA,KAAK,CAAC,YAAN,CAAmB,MAAnB,EAA2B,MAA3B;AACA,YAAA,KAAK,CAAC,YAAN,CAAmB,QAAnB,EAA6B,IAA7B;AACA,YAAA,KAAK,CAAC,YAAN,CAAmB,IAAnB,EAAyB,MAAM,EAA/B;;AACA,gBAAI,QAAJ,EAAc;AACZ,cAAA,KAAK,CAAC,YAAN,CAAmB,UAAnB,EAA+B,UAA/B;AACD;;AAED,YAAA,QAAQ,CAAC,IAAT,CAAc,WAAd,CAA0B,KAA1B;AAvBW,6CAyBJ,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAoB;AACrC,cAAA,KAAK,CAAC,gBAAN,CAAuB,QAAvB,EAAiC,YAAK;AACpC,oBAAI,KAAK,CAAC,KAAV,EAAiB;AACf,sBAAM,UAAU,GAAG,KAAK,CAAC,KAAN,CAAY,CAAZ,CAAnB;AACA,sBAAM,MAAM,GAAG,IAAI,UAAJ,EAAf;;AACA,kBAAA,MAAM,CAAC,OAAP,GAAiB,YAAK;AACpB,oBAAA,MAAM,CAAC,IAAI,KAAJ,mEAAD,CAAN;AACD,mBAFD;;AAGA,kBAAA,MAAM,CAAC,MAAP,GAAgB,iBAAe;AAAA,wBAAZ,MAAY,SAAZ,MAAY;AAC7B,wBAAM,GAAG,GAAI,MAAc,CAAC,MAA5B;AACA,oBAAA,OAAO,CAAC;AACN,sBAAA,IAAI,EAAE,SADA;AAEN,sBAAA,GAAG,EAAH,GAFM;AAGN,sBAAA,IAAI,EAAE,UAAU,CAAC,IAHX;AAIN,sBAAA,IAAI,EAAE,UAJA;AAKN,sBAAA,YAAY,EAAE,UAAU,CAAC,YALnB;AAMN,sBAAA,IAAI,EAAE,UAAU,CAAC,IANX;AAON,sBAAA,MAAM,EAAE,KAAK,CAAC;AAPR,qBAAD,CAAP;AASD,mBAXD;;AAaA,kBAAA,MAAM,CAAC,aAAP,CAAqB,UAArB;AACD,iBApBD,MAoBO;AACL,kBAAA,OAAO,CAAC;AAAE,oBAAA,IAAI,EAAE;AAAR,mBAAD,CAAP;AACD;;AAED,gBAAA,QAAQ,CAAC,IAAT,CAAc,WAAd,CAA0B,KAA1B;AACD,eA1BD;AA4BA,kBAAM,KAAK,GAAG,IAAI,UAAJ,CAAe,OAAf,CAAd;AACA,cAAA,KAAK,CAAC,aAAN,CAAoB,KAApB;AACD,aA/BM,CAzBI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAf","sourcesContent":["import { Platform } from '@unimodules/core';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { DocumentPickerOptions, DocumentResult } from './types';\n\nexport default {\n  get name(): string {\n    return 'ExpoDocumentPicker';\n  },\n\n  async getDocumentAsync({\n    type = '*/*',\n    multiple = false,\n  }: DocumentPickerOptions): Promise<DocumentResult> {\n    // SSR guard\n    if (!Platform.isDOMAvailable) {\n      return { type: 'cancel' };\n    }\n\n    const input = document.createElement('input');\n    input.style.display = 'none';\n    input.setAttribute('type', 'file');\n    input.setAttribute('accept', type);\n    input.setAttribute('id', uuidv4());\n    if (multiple) {\n      input.setAttribute('multiple', 'multiple');\n    }\n\n    document.body.appendChild(input);\n\n    return new Promise((resolve, reject) => {\n      input.addEventListener('change', () => {\n        if (input.files) {\n          const targetFile = input.files[0];\n          const reader = new FileReader();\n          reader.onerror = () => {\n            reject(new Error(`Failed to read the selected media because the operation failed.`));\n          };\n          reader.onload = ({ target }) => {\n            const uri = (target as any).result;\n            resolve({\n              type: 'success',\n              uri,\n              name: targetFile.name,\n              file: targetFile,\n              lastModified: targetFile.lastModified,\n              size: targetFile.size,\n              output: input.files,\n            });\n          };\n          // Read in the image file as a binary string.\n          reader.readAsDataURL(targetFile);\n        } else {\n          resolve({ type: 'cancel' });\n        }\n\n        document.body.removeChild(input);\n      });\n\n      const event = new MouseEvent('click');\n      input.dispatchEvent(event);\n    });\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}