{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport createDataContext from \"./createDataContext\";\nimport { insertIntoSubcollection, updateDocAttribute } from \"../api/firebase\";\nimport GLOBALS from \"../Globals\";\n\nvar paymentReducer = function paymentReducer(state, action) {\n  switch (action.type) {\n    case 'fetch_payments':\n      return {\n        loading: false\n      };\n\n    case 'add_payment':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: false\n      });\n\n    case 'loading':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: true\n      });\n\n    default:\n      return state;\n  }\n};\n\nvar createPaymentForUser = function createPaymentForUser(dispatch) {\n  return function _callee(user, order) {\n    var userBalance, payment, newBalance;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            dispatch({\n              type: 'loading'\n            });\n            console.log(\"Creating payment for user: \" + user.id);\n            userBalance = user.balance ? user.balance : 0;\n            payment = {\n              date: new Date().toISOString(),\n              userId: user.id,\n              orderId: order.id,\n              currentBalance: userBalance,\n              orderTotalAmount: order.totalAmount,\n              totalToBePaid: order.totalAmount - userBalance,\n              status: GLOBALS.PAYMENT.STATUS.OPENED\n            };\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(insertIntoSubcollection(GLOBALS.COLLECTION.USERS, user.id, GLOBALS.SUB_COLLECTION.PAYMENTS, payment));\n\n          case 6:\n            newBalance = userBalance - order.totalAmount;\n            _context.next = 9;\n            return _regeneratorRuntime.awrap(updateDocAttribute(GLOBALS.COLLECTION.USERS, user.id, GLOBALS.USER.ATTRIBUTE.BALANCE, newBalance));\n\n          case 9:\n            dispatch({\n              type: 'add_payment'\n            });\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nvar _createDataContext = createDataContext(paymentReducer, {\n  createPaymentForUser: createPaymentForUser\n}, {\n  payments: [],\n  payment: null,\n  loading: false\n}),\n    Provider = _createDataContext.Provider,\n    Context = _createDataContext.Context;\n\nexport { Provider, Context };","map":{"version":3,"sources":["/home/bordi/projects/cestas-cooperflora-rn/src/context/PaymentContext.js"],"names":["createDataContext","insertIntoSubcollection","updateDocAttribute","GLOBALS","paymentReducer","state","action","type","loading","createPaymentForUser","dispatch","user","order","console","log","id","userBalance","balance","payment","date","Date","toISOString","userId","orderId","currentBalance","orderTotalAmount","totalAmount","totalToBePaid","status","PAYMENT","STATUS","OPENED","COLLECTION","USERS","SUB_COLLECTION","PAYMENTS","newBalance","USER","ATTRIBUTE","BALANCE","payments","Provider","Context"],"mappings":";;;;;;;AAAA,OAAOA,iBAAP;AACA,SAASC,uBAAT,EAAkCC,kBAAlC;AACA,OAAOC,OAAP;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,KAAD,EAAQC,MAAR,EAAmB;AACxC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,gBAAL;AACE,aAAO;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAP;;AACF,SAAK,aAAL;AACE,6CAAYH,KAAZ;AAAmBG,QAAAA,OAAO,EAAE;AAA5B;;AACF,SAAK,SAAL;AACE,6CAAYH,KAAZ;AAAmBG,QAAAA,OAAO,EAAE;AAA5B;;AACF;AACE,aAAOH,KAAP;AARJ;AAUD,CAXD;;AAaA,IAAMI,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,QAAD;AAAA,SAAc,iBAAOC,IAAP,EAAaC,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AACzCF,YAAAA,QAAQ,CAAC;AAAEH,cAAAA,IAAI,EAAE;AAAR,aAAD,CAAR;AAEAM,YAAAA,OAAO,CAACC,GAAR,iCAA0CH,IAAI,CAACI,EAA/C;AAEMC,YAAAA,WALmC,GAKrBL,IAAI,CAACM,OAAL,GAAeN,IAAI,CAACM,OAApB,GAA8B,CALT;AAOnCC,YAAAA,OAPmC,GAOzB;AACdC,cAAAA,IAAI,EAAE,IAAIC,IAAJ,GAAWC,WAAX,EADQ;AAEdC,cAAAA,MAAM,EAAEX,IAAI,CAACI,EAFC;AAGdQ,cAAAA,OAAO,EAAEX,KAAK,CAACG,EAHD;AAIdS,cAAAA,cAAc,EAAER,WAJF;AAKdS,cAAAA,gBAAgB,EAAEb,KAAK,CAACc,WALV;AAMdC,cAAAA,aAAa,EAAEf,KAAK,CAACc,WAAN,GAAoBV,WANrB;AAOdY,cAAAA,MAAM,EAAEzB,OAAO,CAAC0B,OAAR,CAAgBC,MAAhB,CAAuBC;AAPjB,aAPyB;AAAA;AAAA,6CAiBnC9B,uBAAuB,CAC3BE,OAAO,CAAC6B,UAAR,CAAmBC,KADQ,EAE3BtB,IAAI,CAACI,EAFsB,EAG3BZ,OAAO,CAAC+B,cAAR,CAAuBC,QAHI,EAI3BjB,OAJ2B,CAjBY;;AAAA;AAwBnCkB,YAAAA,UAxBmC,GAwBtBpB,WAAW,GAAGJ,KAAK,CAACc,WAxBE;AAAA;AAAA,6CA0BnCxB,kBAAkB,CACtBC,OAAO,CAAC6B,UAAR,CAAmBC,KADG,EAEtBtB,IAAI,CAACI,EAFiB,EAGtBZ,OAAO,CAACkC,IAAR,CAAaC,SAAb,CAAuBC,OAHD,EAItBH,UAJsB,CA1BiB;;AAAA;AAiCzC1B,YAAAA,QAAQ,CAAC;AAAEH,cAAAA,IAAI,EAAE;AAAR,aAAD,CAAR;;AAjCyC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAd;AAAA,CAA7B;;AAoCO,yBAA8BP,iBAAiB,CACpDI,cADoD,EAEpD;AACEK,EAAAA,oBAAoB,EAApBA;AADF,CAFoD,EAKpD;AAAE+B,EAAAA,QAAQ,EAAE,EAAZ;AAAgBtB,EAAAA,OAAO,EAAE,IAAzB;AAA+BV,EAAAA,OAAO,EAAE;AAAxC,CALoD,CAA/C;AAAA,IAAQiC,QAAR,sBAAQA,QAAR;AAAA,IAAkBC,OAAlB,sBAAkBA,OAAlB","sourcesContent":["import createDataContext from './createDataContext';\nimport { insertIntoSubcollection, updateDocAttribute } from '../api/firebase';\nimport GLOBALS from '../Globals';\n\nconst paymentReducer = (state, action) => {\n  switch (action.type) {\n    case 'fetch_payments':\n      return { loading: false };\n    case 'add_payment':\n      return { ...state, loading: false };\n    case 'loading':\n      return { ...state, loading: true };\n    default:\n      return state;\n  }\n};\n\nconst createPaymentForUser = (dispatch) => async (user, order) => {\n  dispatch({ type: 'loading' });\n\n  console.log(`Creating payment for user: ${user.id}`);\n\n  const userBalance = user.balance ? user.balance : 0;\n\n  const payment = {\n    date: new Date().toISOString(),\n    userId: user.id,\n    orderId: order.id,\n    currentBalance: userBalance,\n    orderTotalAmount: order.totalAmount,\n    totalToBePaid: order.totalAmount - userBalance,\n    status: GLOBALS.PAYMENT.STATUS.OPENED,\n  };\n\n  await insertIntoSubcollection(\n    GLOBALS.COLLECTION.USERS,\n    user.id,\n    GLOBALS.SUB_COLLECTION.PAYMENTS,\n    payment\n  );\n\n  const newBalance = userBalance - order.totalAmount;\n\n  await updateDocAttribute(\n    GLOBALS.COLLECTION.USERS,\n    user.id,\n    GLOBALS.USER.ATTRIBUTE.BALANCE,\n    newBalance\n  );\n\n  dispatch({ type: 'add_payment' });\n};\n\nexport const { Provider, Context } = createDataContext(\n  paymentReducer,\n  {\n    createPaymentForUser,\n  },\n  { payments: [], payment: null, loading: false }\n);\n"]},"metadata":{},"sourceType":"module"}