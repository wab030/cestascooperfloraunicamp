{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport firebase from 'firebase';\nimport 'firebase/firestore';\nimport createDataContext from \"./createDataContext\";\nimport { getByAttribute, insertDocAndRetrieveId, updateDoc } from \"../api/firebase\";\nimport GLOBALS from \"../Globals\";\nimport { showAlert } from \"../helper/HelperFunctions\";\n\nvar orderReducer = function orderReducer(state, action) {\n  switch (action.type) {\n    case 'start_order':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: false,\n        initialProducts: JSON.parse(JSON.stringify(action.payload)),\n        order: {\n          baseProducts: 0,\n          extraProducts: action.payload,\n          productsPriceSum: 0,\n          totalAmount: 0,\n          status: GLOBALS.ORDER.STATUS.OPENED\n        }\n      });\n\n    case 'add_base_products':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: false,\n        order: _objectSpread(_objectSpread({}, state.order), {}, {\n          baseProducts: state.order.baseProducts + 1,\n          productsPriceSum: state.order.productsPriceSum + action.payload\n        })\n      });\n\n    case 'remove_base_products':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: false,\n        order: _objectSpread(_objectSpread({}, state.order), {}, {\n          baseProducts: state.order.baseProducts > 0 ? state.order.baseProducts - 1 : 0,\n          productsPriceSum: state.order.productsPriceSum - action.payload\n        })\n      });\n\n    case 'add_product':\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          loading: false,\n          order: _objectSpread(_objectSpread({}, state.order), {}, {\n            extraProducts: action.payload.extraProducts,\n            productsPriceSum: state.order.productsPriceSum + action.payload.productPrice\n          })\n        });\n      }\n\n    case 'remove_product':\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          loading: false,\n          order: _objectSpread(_objectSpread({}, state.order), {}, {\n            extraProducts: action.payload.extraProducts,\n            productsPriceSum: state.order.productsPriceSum - action.payload.productPrice\n          })\n        });\n      }\n\n    case 'fetch_orders':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: false,\n        orders: action.payload\n      });\n\n    case 'fetch_order':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: false,\n        order: action.payload,\n        initialProducts: action.payload && action.payload.extraProducts ? JSON.parse(JSON.stringify(action.payload.extraProducts)) : []\n      });\n\n    case 'add_order':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        order: action.payload,\n        initialProducts: JSON.parse(JSON.stringify(action.payload.extraProducts)),\n        loading: false\n      });\n\n    case 'loading':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: true\n      });\n\n    case 'stop_loading':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: false\n      });\n\n    default:\n      return state;\n  }\n};\n\nvar startOrder = function startOrder(dispatch) {\n  return function (extraProducts) {\n    console.log('Starting new order...');\n    var newExtraProducts = [];\n    extraProducts.forEach(function (extraProduct) {\n      newExtraProducts.push({\n        productId: extraProduct.id,\n        productTitle: extraProduct.name,\n        productPrice: extraProduct.price,\n        quantity: 0\n      });\n    });\n    dispatch({\n      type: 'start_order',\n      payload: newExtraProducts\n    });\n  };\n};\n\nvar addBaseProducts = function addBaseProducts(dispatch) {\n  return function (baseProductsPrice) {\n    dispatch({\n      type: 'add_base_products',\n      payload: baseProductsPrice\n    });\n  };\n};\n\nvar removeBaseProducts = function removeBaseProducts(dispatch) {\n  return function (baseProductsPrice) {\n    dispatch({\n      type: 'remove_base_products',\n      payload: baseProductsPrice\n    });\n  };\n};\n\nvar addProduct = function addProduct(dispatch) {\n  return function (extraProducts, product, initialProducts) {\n    var _initialProducts$init;\n\n    var productIndex = extraProducts.findIndex(function (prod) {\n      return prod.productId === product.productId;\n    });\n    var initialIndex = initialProducts.findIndex(function (prod) {\n      return prod.productId === product.productId;\n    });\n\n    if (extraProducts[productIndex].maxQuantity == null || product.quantity < extraProducts[productIndex].maxQuantity || product.quantity < ((_initialProducts$init = initialProducts[initialIndex]) == null ? void 0 : _initialProducts$init.quantity)) {\n      extraProducts[productIndex].quantity += 1;\n      dispatch({\n        type: 'add_product',\n        payload: {\n          extraProducts: extraProducts,\n          productPrice: product.productPrice\n        }\n      });\n      return;\n    }\n\n    showAlert(\"Quantidade indispon\\xEDvel de \" + extraProducts[productIndex].productTitle + \".\");\n  };\n};\n\nvar removeProduct = function removeProduct(dispatch) {\n  return function (extraProducts, product) {\n    var productIndex = extraProducts.findIndex(function (prod) {\n      return prod.productTitle === product.productTitle;\n    });\n\n    if (extraProducts[productIndex].quantity > 0) {\n      extraProducts[productIndex].quantity -= 1;\n      dispatch({\n        type: 'remove_product',\n        payload: {\n          extraProducts: extraProducts,\n          productPrice: product.productPrice\n        }\n      });\n    }\n  };\n};\n\nvar fetchOrdersByDelivery = function fetchOrdersByDelivery(dispatch) {\n  return function _callee(deliveryId) {\n    var orders;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log('Fetching orders by delivery...');\n            dispatch({\n              type: 'loading'\n            });\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(getByAttribute(GLOBALS.COLLECTION.ORDERS, 'deliveryId', deliveryId));\n\n          case 4:\n            orders = _context.sent;\n            dispatch({\n              type: 'fetch_orders',\n              payload: orders\n            });\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nvar fetchUserOrder = function fetchUserOrder(dispatch) {\n  return function _callee2(userId, deliveryId, extraProducts) {\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            console.log('Fetching user order by delivery...');\n            dispatch({\n              type: 'loading'\n            });\n            getByAttribute(GLOBALS.COLLECTION.ORDERS, 'userId', userId).then(function (data) {\n              var orderData = data.filter(function (order) {\n                return order.deliveryId === deliveryId;\n              });\n\n              if (orderData.length > 0) {\n                dispatch({\n                  type: 'fetch_order',\n                  payload: orderData[0]\n                });\n              } else {\n                startOrder(dispatch)(extraProducts);\n              }\n            }).catch(function (error) {\n              console.log('[Order Context - Fetching order] - ERRO', error);\n            });\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nvar getUserOrder = function getUserOrder(dispatch) {\n  return function _callee3(userId, deliveryId) {\n    var orderData, order;\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            console.log('Get user order by delivery...');\n            dispatch({\n              type: 'loading'\n            });\n            _context3.next = 4;\n            return _regeneratorRuntime.awrap(getByAttribute(GLOBALS.COLLECTION.ORDERS, 'userId', userId));\n\n          case 4:\n            orderData = _context3.sent;\n            order = orderData.filter(function (data) {\n              return data.deliveryId === deliveryId;\n            });\n\n            if (!(order.length > 0)) {\n              _context3.next = 9;\n              break;\n            }\n\n            dispatch({\n              type: 'fetch_order',\n              payload: order[0]\n            });\n            return _context3.abrupt(\"return\", order[0]);\n\n          case 9:\n            dispatch({\n              type: 'fetch_order',\n              payload: null\n            });\n            return _context3.abrupt(\"return\", null);\n\n          case 11:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nvar findExtraProductsToUpdate = function findExtraProductsToUpdate(updatedOrderProducts, initialOrderProducts) {\n  var extraProductsToUpdate = [];\n  updatedOrderProducts.forEach(function (orderProduct) {\n    initialOrderProducts.forEach(function (initialProduct) {\n      if (orderProduct.productId === initialProduct.productId && orderProduct.quantity !== initialProduct.quantity) {\n        extraProductsToUpdate.push({\n          productId: orderProduct.productId,\n          productTitle: orderProduct.productTitle,\n          quantity: orderProduct.quantity,\n          quantityDiff: orderProduct.quantity - initialProduct.quantity\n        });\n      }\n    });\n  });\n  updatedOrderProducts.filter(function (updatedProduct) {\n    var ids = initialOrderProducts.map(function (prod) {\n      return prod.productId;\n    });\n    return !ids.includes(updatedProduct.productId) && updatedProduct.quantity > 0;\n  }).forEach(function (updatedProduct) {\n    var extraToUpdateIds = extraProductsToUpdate.map(function (extra) {\n      return extra.productId;\n    });\n\n    if (!extraToUpdateIds.includes(updatedProduct.productId)) {\n      extraProductsToUpdate.push({\n        productId: updatedProduct.productId,\n        productTitle: updatedProduct.productTitle,\n        quantity: updatedProduct.quantity,\n        quantityDiff: updatedProduct.quantity\n      });\n    }\n  });\n  return extraProductsToUpdate;\n};\n\nvar updateDeliveryExtraProductsQuantities = function updateDeliveryExtraProductsQuantities(dispatch) {\n  return function _callee4(deliveryId, extraProductsToUpdate) {\n    var db, deliveryRef;\n    return _regeneratorRuntime.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            db = firebase.firestore();\n            _context4.next = 3;\n            return _regeneratorRuntime.awrap(db.collection(GLOBALS.COLLECTION.GROUPS).doc(GLOBALS.CONSUMER_GROUP.ID).collection(GLOBALS.COLLECTION.DELIVERIES).doc(deliveryId));\n\n          case 3:\n            deliveryRef = _context4.sent;\n            _context4.next = 6;\n            return _regeneratorRuntime.awrap(db.runTransaction(function (transaction) {\n              console.log('Update delivery extra products - Init transaction');\n              return transaction.get(deliveryRef).then(function (deliveryDoc) {\n                if (!deliveryDoc.exists) {\n                  console.log(\"Delivery \" + deliveryId + \" not found to update its products.\");\n                } else {\n                  var delivery = deliveryDoc.data();\n                  delivery.extraProducts.forEach(function (product, index) {\n                    var extraToUpdateArr = extraProductsToUpdate.filter(function (extra) {\n                      return extra.productId === product.id;\n                    });\n                    var extraToUpdate = extraToUpdateArr ? extraToUpdateArr[0] : null;\n\n                    if (!extraToUpdate) {\n                      return;\n                    }\n\n                    if (product.availableQuantity != null) {\n                      var currentAvailableQuantity = product.availableQuantity - product.orderedQuantity;\n                      console.log(\"Current available: \" + currentAvailableQuantity);\n                      console.log(\"To update: \" + JSON.stringify(extraToUpdate));\n\n                      if (extraToUpdate.quantityDiff > 0 && extraToUpdate.quantityDiff > currentAvailableQuantity) {\n                        dispatch({\n                          type: 'stop_loading'\n                        });\n                        throw \"N\\xE3o h\\xE1 quantidade suficiente dispon\\xEDvel de \" + extraToUpdate.productTitle + \". Por favor, tente refazer o pedido com uma quantidade menor.\";\n                      }\n                    }\n\n                    product.orderedQuantity += extraToUpdate.quantityDiff;\n                    delivery.extraProducts[index] = product;\n                  });\n                  console.log(\"Atualizando extras: \" + JSON.stringify(delivery.extraProducts));\n                  transaction.update(deliveryRef, {\n                    extraProducts: delivery.extraProducts\n                  });\n                }\n              });\n            }));\n\n          case 6:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nvar addOrder = function addOrder(dispatch) {\n  return function _callee5(userId, userName, deliveryId, deliveryFee, order, initialProducts) {\n    var extraProducts, totalAmount, newOrder, extraProductsToUpdate, orderId;\n    return _regeneratorRuntime.async(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            dispatch({\n              type: 'loading'\n            });\n            console.log('[Order Context] adding Order ---------');\n            console.log(\"Initial products: \" + JSON.stringify(initialProducts));\n            console.log(\"Updated products: \" + JSON.stringify(order.extraProducts));\n            extraProducts = order.extraProducts ? order.extraProducts.filter(function (prod) {\n              return prod.quantity > 0;\n            }) : [];\n            totalAmount = order.productsPriceSum > 0 ? order.productsPriceSum + deliveryFee : 0;\n            newOrder = _objectSpread(_objectSpread({}, order), {}, {\n              userId: userId,\n              userName: userName,\n              deliveryId: deliveryId,\n              extraProducts: extraProducts,\n              totalAmount: totalAmount,\n              status: totalAmount > 0 ? GLOBALS.ORDER.STATUS.OPENED : GLOBALS.ORDER.STATUS.CANCELED\n            });\n            extraProductsToUpdate = findExtraProductsToUpdate(order.extraProducts, initialProducts);\n\n            if (!(extraProductsToUpdate.length > 0)) {\n              _context5.next = 12;\n              break;\n            }\n\n            console.log(\"Updating delivery extra products for delivery=\" + deliveryId + \" and user=\" + userId + \"; products to update: \" + JSON.stringify(extraProductsToUpdate));\n            _context5.next = 12;\n            return _regeneratorRuntime.awrap(updateDeliveryExtraProductsQuantities(dispatch)(deliveryId, extraProductsToUpdate));\n\n          case 12:\n            if (order.id && order.id.length > 0) {\n              console.log('[Add order] update order');\n              orderId = order.id;\n              newOrder.updatedAt = new Date().toISOString();\n              updateDoc(GLOBALS.COLLECTION.ORDERS, orderId, newOrder).then(function () {\n                return dispatch({\n                  type: 'add_order',\n                  payload: newOrder\n                });\n              });\n            } else {\n              console.log('[Add order] new order');\n              newOrder.date = new Date().toISOString();\n              insertDocAndRetrieveId(GLOBALS.COLLECTION.ORDERS, newOrder).then(function (orderId) {\n                newOrder.id = orderId;\n                dispatch({\n                  type: 'add_order',\n                  payload: newOrder\n                });\n              }).catch(function (error) {\n                console.log('[Order Context - Add order] - ERRO', error);\n              });\n            }\n\n          case 13:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nvar completeOrderDelivery = function completeOrderDelivery(dispatch) {\n  return function (userId, userName, deliveryId, deliveryFee, order) {\n    console.log('Completing order delivery...');\n    dispatch({\n      type: 'loading'\n    });\n    var extraProducts = order.extraProducts ? order.extraProducts.filter(function (prod) {\n      return prod.quantity > 0;\n    }) : [];\n    var totalAmount = order.productsPriceSum > 0 ? order.productsPriceSum + deliveryFee : 0;\n\n    var newOrder = _objectSpread(_objectSpread({}, order), {}, {\n      userId: userId,\n      userName: userName,\n      deliveryId: deliveryId,\n      extraProducts: extraProducts,\n      totalAmount: totalAmount,\n      updatedAt: new Date().toISOString(),\n      status: GLOBALS.ORDER.STATUS.COMPLETED\n    });\n\n    updateDoc(GLOBALS.COLLECTION.ORDERS, order.id, newOrder).then(function () {\n      dispatch({\n        type: 'add_order',\n        payload: newOrder\n      });\n    }).catch(function (error) {\n      return console.log('[Order context] - Error completing delivery', error);\n    });\n    return newOrder;\n  };\n};\n\nvar _createDataContext = createDataContext(orderReducer, {\n  startOrder: startOrder,\n  addBaseProducts: addBaseProducts,\n  removeBaseProducts: removeBaseProducts,\n  addProduct: addProduct,\n  removeProduct: removeProduct,\n  fetchOrdersByDelivery: fetchOrdersByDelivery,\n  fetchUserOrder: fetchUserOrder,\n  addOrder: addOrder,\n  completeOrderDelivery: completeOrderDelivery,\n  getUserOrder: getUserOrder\n}, {\n  orders: [],\n  order: {\n    userId: '',\n    userName: '',\n    deliveryId: '',\n    baseProducts: 0,\n    extraProducts: [],\n    productsPriceSum: 0,\n    totalAmount: 0,\n    date: '',\n    updatedAt: '',\n    updatedBy: '',\n    status: ''\n  },\n  loading: false\n}),\n    Provider = _createDataContext.Provider,\n    Context = _createDataContext.Context;\n\nexport { Provider, Context };","map":{"version":3,"sources":["/home/bordi/projects/cestas-cooperflora-rn/src/context/OrderContext.js"],"names":["firebase","createDataContext","getByAttribute","insertDocAndRetrieveId","updateDoc","GLOBALS","showAlert","orderReducer","state","action","type","loading","initialProducts","JSON","parse","stringify","payload","order","baseProducts","extraProducts","productsPriceSum","totalAmount","status","ORDER","STATUS","OPENED","productPrice","orders","startOrder","dispatch","console","log","newExtraProducts","forEach","extraProduct","push","productId","id","productTitle","name","price","quantity","addBaseProducts","baseProductsPrice","removeBaseProducts","addProduct","product","productIndex","findIndex","prod","initialIndex","maxQuantity","removeProduct","fetchOrdersByDelivery","deliveryId","COLLECTION","ORDERS","fetchUserOrder","userId","then","data","orderData","filter","length","catch","error","getUserOrder","findExtraProductsToUpdate","updatedOrderProducts","initialOrderProducts","extraProductsToUpdate","orderProduct","initialProduct","quantityDiff","updatedProduct","ids","map","includes","extraToUpdateIds","extra","updateDeliveryExtraProductsQuantities","db","firestore","collection","GROUPS","doc","CONSUMER_GROUP","ID","DELIVERIES","deliveryRef","runTransaction","transaction","get","deliveryDoc","exists","delivery","index","extraToUpdateArr","extraToUpdate","availableQuantity","currentAvailableQuantity","orderedQuantity","update","addOrder","userName","deliveryFee","newOrder","CANCELED","orderId","updatedAt","Date","toISOString","date","completeOrderDelivery","COMPLETED","updatedBy","Provider","Context"],"mappings":"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","sourcesContent":["import firebase from 'firebase';\nimport 'firebase/firestore';\nimport createDataContext from './createDataContext';\nimport {\n  getByAttribute,\n  insertDocAndRetrieveId,\n  updateDoc,\n} from '../api/firebase';\nimport GLOBALS from '../Globals';\nimport { showAlert } from '../helper/HelperFunctions';\n\nconst orderReducer = (state, action) => {\n  switch (action.type) {\n    case 'start_order':\n      return {\n        ...state,\n        loading: false,\n        initialProducts: JSON.parse(JSON.stringify(action.payload)),\n        order: {\n          baseProducts: 0,\n          extraProducts: action.payload,\n          productsPriceSum: 0,\n          totalAmount: 0,\n          status: GLOBALS.ORDER.STATUS.OPENED,\n        },\n      };\n    case 'add_base_products':\n      return {\n        ...state,\n        loading: false,\n        order: {\n          ...state.order,\n          baseProducts: state.order.baseProducts + 1,\n          productsPriceSum: state.order.productsPriceSum + action.payload,\n        },\n      };\n    case 'remove_base_products':\n      return {\n        ...state,\n        loading: false,\n        order: {\n          ...state.order,\n          baseProducts:\n            state.order.baseProducts > 0 ? state.order.baseProducts - 1 : 0,\n          productsPriceSum: state.order.productsPriceSum - action.payload,\n        },\n      };\n    case 'add_product': {\n      return {\n        ...state,\n        loading: false,\n        order: {\n          ...state.order,\n          extraProducts: action.payload.extraProducts,\n          productsPriceSum:\n            state.order.productsPriceSum + action.payload.productPrice,\n        },\n      };\n    }\n    case 'remove_product': {\n      return {\n        ...state,\n        loading: false,\n        order: {\n          ...state.order,\n          extraProducts: action.payload.extraProducts,\n          productsPriceSum:\n            state.order.productsPriceSum - action.payload.productPrice,\n        },\n      };\n    }\n    case 'fetch_orders':\n      return { ...state, loading: false, orders: action.payload };\n    case 'fetch_order':\n      return {\n        ...state,\n        loading: false,\n        order: action.payload,\n        initialProducts:\n          action.payload && action.payload.extraProducts\n            ? JSON.parse(JSON.stringify(action.payload.extraProducts))\n            : [],\n      };\n    case 'add_order':\n      return {\n        ...state,\n        order: action.payload,\n        initialProducts: JSON.parse(\n          JSON.stringify(action.payload.extraProducts)\n        ),\n        loading: false,\n      };\n    case 'loading':\n      return { ...state, loading: true };\n    case 'stop_loading':\n      return { ...state, loading: false };\n    default:\n      return state;\n  }\n};\n\nconst startOrder = (dispatch) => (extraProducts) => {\n  console.log('Starting new order...');\n  const newExtraProducts = [];\n\n  extraProducts.forEach((extraProduct) => {\n    newExtraProducts.push({\n      productId: extraProduct.id,\n      productTitle: extraProduct.name,\n      productPrice: extraProduct.price,\n      quantity: 0,\n    });\n  });\n\n  dispatch({ type: 'start_order', payload: newExtraProducts });\n};\n\nconst addBaseProducts = (dispatch) => (baseProductsPrice) => {\n  dispatch({ type: 'add_base_products', payload: baseProductsPrice });\n};\n\nconst removeBaseProducts = (dispatch) => (baseProductsPrice) => {\n  dispatch({ type: 'remove_base_products', payload: baseProductsPrice });\n};\n\nconst addProduct = (dispatch) => (extraProducts, product, initialProducts) => {\n  const productIndex = extraProducts.findIndex(\n    (prod) => prod.productId === product.productId\n  );\n\n  const initialIndex = initialProducts.findIndex(\n    (prod) => prod.productId === product.productId\n  );\n\n  if (\n    extraProducts[productIndex].maxQuantity == null ||\n    product.quantity < extraProducts[productIndex].maxQuantity ||\n    product.quantity < initialProducts[initialIndex]?.quantity\n  ) {\n    extraProducts[productIndex].quantity += 1;\n    dispatch({\n      type: 'add_product',\n      payload: { extraProducts, productPrice: product.productPrice },\n    });\n    return;\n  }\n\n  showAlert(\n    `Quantidade indisponível de ${extraProducts[productIndex].productTitle}.`\n  );\n};\n\nconst removeProduct = (dispatch) => (extraProducts, product) => {\n  const productIndex = extraProducts.findIndex(\n    (prod) => prod.productTitle === product.productTitle\n  );\n\n  if (extraProducts[productIndex].quantity > 0) {\n    extraProducts[productIndex].quantity -= 1;\n    dispatch({\n      type: 'remove_product',\n      payload: { extraProducts, productPrice: product.productPrice },\n    });\n  }\n};\n\nconst fetchOrdersByDelivery = (dispatch) => async (deliveryId) => {\n  console.log('Fetching orders by delivery...');\n  dispatch({ type: 'loading' });\n\n  const orders = await getByAttribute(\n    GLOBALS.COLLECTION.ORDERS,\n    'deliveryId',\n    deliveryId\n  );\n\n  dispatch({ type: 'fetch_orders', payload: orders });\n};\n\nconst fetchUserOrder =\n  (dispatch) => async (userId, deliveryId, extraProducts) => {\n    console.log('Fetching user order by delivery...');\n    dispatch({ type: 'loading' });\n\n    getByAttribute(GLOBALS.COLLECTION.ORDERS, 'userId', userId)\n      .then((data) => {\n        const orderData = data.filter(\n          (order) => order.deliveryId === deliveryId\n        );\n        if (orderData.length > 0) {\n          dispatch({\n            type: 'fetch_order',\n            payload: orderData[0],\n          });\n        } else {\n          startOrder(dispatch)(extraProducts);\n        }\n      })\n      .catch((error) => {\n        console.log('[Order Context - Fetching order] - ERRO', error);\n      });\n  };\n\nconst getUserOrder = (dispatch) => async (userId, deliveryId) => {\n  console.log('Get user order by delivery...');\n  dispatch({ type: 'loading' });\n\n  const orderData = await getByAttribute(\n    GLOBALS.COLLECTION.ORDERS,\n    'userId',\n    userId\n  );\n  const order = orderData.filter((data) => data.deliveryId === deliveryId);\n\n  if (order.length > 0) {\n    dispatch({ type: 'fetch_order', payload: order[0] });\n    return order[0];\n  }\n\n  dispatch({ type: 'fetch_order', payload: null });\n\n  return null;\n};\n\nconst findExtraProductsToUpdate = (\n  updatedOrderProducts,\n  initialOrderProducts\n) => {\n  const extraProductsToUpdate = [];\n\n  updatedOrderProducts.forEach((orderProduct) => {\n    initialOrderProducts.forEach((initialProduct) => {\n      if (\n        orderProduct.productId === initialProduct.productId &&\n        orderProduct.quantity !== initialProduct.quantity\n      ) {\n        extraProductsToUpdate.push({\n          productId: orderProduct.productId,\n          productTitle: orderProduct.productTitle,\n          quantity: orderProduct.quantity,\n          quantityDiff: orderProduct.quantity - initialProduct.quantity,\n        });\n      }\n    });\n  });\n\n  updatedOrderProducts\n    .filter((updatedProduct) => {\n      const ids = initialOrderProducts.map((prod) => prod.productId);\n      return (\n        !ids.includes(updatedProduct.productId) && updatedProduct.quantity > 0\n      );\n    })\n    .forEach((updatedProduct) => {\n      const extraToUpdateIds = extraProductsToUpdate.map(\n        (extra) => extra.productId\n      );\n      if (!extraToUpdateIds.includes(updatedProduct.productId)) {\n        extraProductsToUpdate.push({\n          productId: updatedProduct.productId,\n          productTitle: updatedProduct.productTitle,\n          quantity: updatedProduct.quantity,\n          quantityDiff: updatedProduct.quantity,\n        });\n      }\n    });\n\n  return extraProductsToUpdate;\n};\n\nconst updateDeliveryExtraProductsQuantities =\n  (dispatch) => async (deliveryId, extraProductsToUpdate) => {\n    const db = firebase.firestore();\n    const deliveryRef = await db\n      .collection(GLOBALS.COLLECTION.GROUPS)\n      .doc(GLOBALS.CONSUMER_GROUP.ID)\n      .collection(GLOBALS.COLLECTION.DELIVERIES)\n      .doc(deliveryId);\n\n    await db.runTransaction((transaction) => {\n      console.log('Update delivery extra products - Init transaction');\n      return transaction.get(deliveryRef).then((deliveryDoc) => {\n        if (!deliveryDoc.exists) {\n          console.log(\n            `Delivery ${deliveryId} not found to update its products.`\n          );\n        } else {\n          const delivery = deliveryDoc.data();\n          delivery.extraProducts.forEach((product, index) => {\n            const extraToUpdateArr = extraProductsToUpdate.filter(\n              (extra) => extra.productId === product.id\n            );\n            const extraToUpdate = extraToUpdateArr ? extraToUpdateArr[0] : null;\n\n            if (!extraToUpdate) {\n              return;\n            }\n\n            if (product.availableQuantity != null) {\n              const currentAvailableQuantity =\n                product.availableQuantity - product.orderedQuantity;\n\n              console.log(`Current available: ${currentAvailableQuantity}`);\n              console.log(`To update: ${JSON.stringify(extraToUpdate)}`);\n\n              if (\n                extraToUpdate.quantityDiff > 0 &&\n                extraToUpdate.quantityDiff > currentAvailableQuantity\n              ) {\n                dispatch({ type: 'stop_loading' });\n                throw `Não há quantidade suficiente disponível de ${extraToUpdate.productTitle}. Por favor, tente refazer o pedido com uma quantidade menor.`;\n              }\n            }\n\n            // TODO: Considerar alteraçao da quantidade maxima permitida por pessoa durante o pedido\n\n            product.orderedQuantity += extraToUpdate.quantityDiff;\n            delivery.extraProducts[index] = product;\n          });\n          console.log(\n            `Atualizando extras: ${JSON.stringify(delivery.extraProducts)}`\n          );\n          transaction.update(deliveryRef, {\n            extraProducts: delivery.extraProducts,\n          });\n        }\n      });\n    });\n  };\n\nconst addOrder =\n  (dispatch) =>\n  async (userId, userName, deliveryId, deliveryFee, order, initialProducts) => {\n    dispatch({ type: 'loading' });\n    console.log('[Order Context] adding Order ---------');\n    console.log(`Initial products: ${JSON.stringify(initialProducts)}`);\n    console.log(`Updated products: ${JSON.stringify(order.extraProducts)}`);\n\n    const extraProducts = order.extraProducts\n      ? order.extraProducts.filter((prod) => prod.quantity > 0)\n      : [];\n\n    const totalAmount =\n      order.productsPriceSum > 0 ? order.productsPriceSum + deliveryFee : 0;\n\n    const newOrder = {\n      ...order,\n      userId,\n      userName,\n      deliveryId,\n      extraProducts,\n      totalAmount,\n      status:\n        totalAmount > 0\n          ? GLOBALS.ORDER.STATUS.OPENED\n          : GLOBALS.ORDER.STATUS.CANCELED,\n    };\n\n    const extraProductsToUpdate = findExtraProductsToUpdate(\n      order.extraProducts,\n      initialProducts\n    );\n\n    if (extraProductsToUpdate.length > 0) {\n      console.log(\n        `Updating delivery extra products for delivery=${deliveryId} and user=${userId}; products to update: ${JSON.stringify(\n          extraProductsToUpdate\n        )}`\n      );\n      await updateDeliveryExtraProductsQuantities(dispatch)(\n        deliveryId,\n        extraProductsToUpdate\n      );\n    }\n\n    if (order.id && order.id.length > 0) {\n      console.log('[Add order] update order');\n      const orderId = order.id;\n      newOrder.updatedAt = new Date().toISOString();\n      updateDoc(GLOBALS.COLLECTION.ORDERS, orderId, newOrder).then(() =>\n        dispatch({ type: 'add_order', payload: newOrder })\n      );\n    } else {\n      console.log('[Add order] new order');\n      newOrder.date = new Date().toISOString();\n      insertDocAndRetrieveId(GLOBALS.COLLECTION.ORDERS, newOrder)\n        .then((orderId) => {\n          newOrder.id = orderId;\n          dispatch({ type: 'add_order', payload: newOrder });\n        })\n        .catch((error) => {\n          console.log('[Order Context - Add order] - ERRO', error);\n        });\n    }\n  };\n\nconst completeOrderDelivery =\n  (dispatch) => (userId, userName, deliveryId, deliveryFee, order) => {\n    console.log('Completing order delivery...');\n    dispatch({ type: 'loading' });\n\n    const extraProducts = order.extraProducts\n      ? order.extraProducts.filter((prod) => prod.quantity > 0)\n      : [];\n\n    const totalAmount =\n      order.productsPriceSum > 0 ? order.productsPriceSum + deliveryFee : 0;\n\n    const newOrder = {\n      ...order,\n      userId,\n      userName,\n      deliveryId,\n      extraProducts,\n      totalAmount,\n      updatedAt: new Date().toISOString(),\n      status: GLOBALS.ORDER.STATUS.COMPLETED,\n    };\n\n    updateDoc(GLOBALS.COLLECTION.ORDERS, order.id, newOrder)\n      .then(() => {\n        dispatch({ type: 'add_order', payload: newOrder });\n      })\n      .catch((error) =>\n        console.log('[Order context] - Error completing delivery', error)\n      );\n\n    return newOrder;\n  };\n\nexport const { Provider, Context } = createDataContext(\n  orderReducer,\n  {\n    startOrder,\n    addBaseProducts,\n    removeBaseProducts,\n    addProduct,\n    removeProduct,\n    fetchOrdersByDelivery,\n    fetchUserOrder,\n    addOrder,\n    completeOrderDelivery,\n    getUserOrder,\n  },\n  {\n    orders: [],\n    order: {\n      userId: '',\n      userName: '',\n      deliveryId: '',\n      baseProducts: 0,\n      extraProducts: [],\n      productsPriceSum: 0,\n      totalAmount: 0,\n      date: '',\n      updatedAt: '',\n      updatedBy: '',\n      status: '',\n    },\n    loading: false,\n  }\n);\n"]},"metadata":{},"sourceType":"module"}