{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport createDataContext from \"./createDataContext\";\nimport { deleteDocInSubcollection, getByIdFromSubcollection, getGroupDeliveries, insertIntoSubcollection, updateDocInSubcollection } from \"../api/firebase\";\nimport GLOBALS from \"../Globals\";\n\nvar deliveryReducer = function deliveryReducer(state, action) {\n  switch (action.type) {\n    case 'fetch_deliveries':\n      return {\n        loading: false,\n        nextDelivery: action.payload.nextDelivery,\n        lastDeliveries: action.payload.lastDeliveries\n      };\n\n    case 'fetch_delivery':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: false,\n        delivery: action.payload.delivery\n      });\n\n    case 'set_info':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: false,\n        deliveryDate: action.payload.deliveryDate,\n        ordersLimitDate: action.payload.ordersLimitDate,\n        baseProducts: action.payload.baseProducts,\n        baseProductsPrice: action.payload.baseProductsPrice,\n        deliveryFee: action.payload.deliveryFee\n      });\n\n    case 'add_delivery':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: false\n      });\n\n    case 'delete_delivery':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: false\n      });\n\n    case 'loading':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: true\n      });\n\n    default:\n      return state;\n  }\n};\n\nvar getNextDelivery = function getNextDelivery(deliveries) {\n  var nextDelivery = [];\n\n  if (deliveries) {\n    var currentDate = new Date();\n    nextDelivery = deliveries.filter(function (delivery) {\n      return delivery.deliveryDate >= currentDate;\n    });\n  }\n\n  return nextDelivery.length ? nextDelivery[0] : null;\n};\n\nvar getLastDeliveries = function getLastDeliveries(deliveries) {\n  var lastDeliveries = [];\n\n  if (deliveries) {\n    var currentDate = new Date();\n    lastDeliveries = deliveries.filter(function (delivery) {\n      return delivery.deliveryDate < currentDate;\n    });\n  }\n\n  return lastDeliveries;\n};\n\nvar fetchDelivery = function fetchDelivery(dispatch) {\n  return function _callee(deliveryId) {\n    var delivery;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            dispatch({\n              type: 'loading'\n            });\n            console.log(\"Fetching delivery by id: \" + deliveryId + \"...\");\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(getByIdFromSubcollection(GLOBALS.COLLECTION.GROUPS, GLOBALS.CONSUMER_GROUP.ID, GLOBALS.COLLECTION.DELIVERIES, deliveryId));\n\n          case 4:\n            delivery = _context.sent;\n            dispatch({\n              type: 'fetch_delivery',\n              payload: {\n                delivery: delivery\n              }\n            });\n            return _context.abrupt(\"return\", delivery);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nvar fetchDeliveries = function fetchDeliveries(dispatch) {\n  return function _callee2() {\n    var deliveries, nextDelivery, lastDeliveries;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            dispatch({\n              type: 'loading'\n            });\n            console.log('Fetching deliveries...');\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(getGroupDeliveries(GLOBALS.COLLECTION.GROUPS, GLOBALS.CONSUMER_GROUP.ID, GLOBALS.COLLECTION.DELIVERIES));\n\n          case 4:\n            deliveries = _context2.sent;\n            nextDelivery = getNextDelivery(deliveries);\n            lastDeliveries = getLastDeliveries(deliveries);\n            dispatch({\n              type: 'fetch_deliveries',\n              payload: {\n                nextDelivery: nextDelivery,\n                lastDeliveries: lastDeliveries\n              }\n            });\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nvar setDeliveryInfo = function setDeliveryInfo(dispatch) {\n  return function _callee3(deliveryDate, ordersDateLimit, ordersTimeLimit, baseProducts, baseProductsPrice, deliveryFee) {\n    var limitDateTime;\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            limitDateTime = new Date(ordersDateLimit.getFullYear(), ordersDateLimit.getMonth(), ordersDateLimit.getDate(), ordersTimeLimit.getHours(), ordersTimeLimit.getMinutes());\n            dispatch({\n              type: 'set_info',\n              payload: {\n                deliveryDate: deliveryDate,\n                ordersLimitDate: limitDateTime,\n                baseProducts: baseProducts,\n                baseProductsPrice: baseProductsPrice,\n                deliveryFee: deliveryFee\n              }\n            });\n\n          case 2:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nvar createDelivery = function createDelivery(dispatch) {\n  return function _callee4(_ref) {\n    var delivery;\n    return _regeneratorRuntime.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            delivery = _ref.delivery;\n            dispatch({\n              type: 'loading'\n            });\n            console.log(\"Creating new delivery: \" + JSON.stringify(delivery));\n            insertIntoSubcollection(GLOBALS.COLLECTION.GROUPS, GLOBALS.CONSUMER_GROUP.ID, GLOBALS.COLLECTION.DELIVERIES, delivery).then(function () {\n              console.log('[createDelivery delivery context] then');\n              dispatch({\n                type: 'add_delivery'\n              });\n            });\n\n          case 4:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nvar updateDelivery = function updateDelivery(dispatch) {\n  return function _callee5(_ref2) {\n    var deliveryId, delivery;\n    return _regeneratorRuntime.async(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            deliveryId = _ref2.deliveryId, delivery = _ref2.delivery;\n            dispatch({\n              type: 'loading'\n            });\n            console.log(\"Updating delivery: \" + JSON.stringify(delivery));\n            updateDocInSubcollection(GLOBALS.COLLECTION.GROUPS, GLOBALS.CONSUMER_GROUP.ID, GLOBALS.COLLECTION.DELIVERIES, deliveryId, delivery).then(function () {\n              dispatch({\n                type: 'add_delivery'\n              });\n            });\n\n          case 4:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nvar deleteDelivery = function deleteDelivery(dispatch) {\n  return function _callee6(_ref3) {\n    var deliveryId;\n    return _regeneratorRuntime.async(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            deliveryId = _ref3.deliveryId;\n            dispatch({\n              type: 'loading'\n            });\n            console.log(\"Deleting delivery with id: \" + deliveryId);\n            deleteDocInSubcollection(GLOBALS.COLLECTION.GROUPS, GLOBALS.CONSUMER_GROUP.ID, GLOBALS.COLLECTION.DELIVERIES, deliveryId).then(function () {\n              dispatch({\n                type: 'delete_delivery'\n              });\n            });\n\n          case 4:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nvar _createDataContext = createDataContext(deliveryReducer, {\n  fetchDeliveries: fetchDeliveries,\n  fetchDelivery: fetchDelivery,\n  setDeliveryInfo: setDeliveryInfo,\n  createDelivery: createDelivery,\n  updateDelivery: updateDelivery,\n  deleteDelivery: deleteDelivery\n}, {\n  deliveries: null,\n  loading: false,\n  delivery: null\n}),\n    Provider = _createDataContext.Provider,\n    Context = _createDataContext.Context;\n\nexport { Provider, Context };","map":{"version":3,"sources":["/home/bordi/projects/cestas-cooperflora-rn/src/context/DeliveryContext.js"],"names":["createDataContext","deleteDocInSubcollection","getByIdFromSubcollection","getGroupDeliveries","insertIntoSubcollection","updateDocInSubcollection","GLOBALS","deliveryReducer","state","action","type","loading","nextDelivery","payload","lastDeliveries","delivery","deliveryDate","ordersLimitDate","baseProducts","baseProductsPrice","deliveryFee","getNextDelivery","deliveries","currentDate","Date","filter","length","getLastDeliveries","fetchDelivery","dispatch","deliveryId","console","log","COLLECTION","GROUPS","CONSUMER_GROUP","ID","DELIVERIES","fetchDeliveries","setDeliveryInfo","ordersDateLimit","ordersTimeLimit","limitDateTime","getFullYear","getMonth","getDate","getHours","getMinutes","createDelivery","JSON","stringify","then","updateDelivery","deleteDelivery","Provider","Context"],"mappings":";;;;;;;AAAA,OAAOA,iBAAP;AACA,SACEC,wBADF,EAEEC,wBAFF,EAGEC,kBAHF,EAIEC,uBAJF,EAKEC,wBALF;AAOA,OAAOC,OAAP;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,MAAR,EAAmB;AACzC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,kBAAL;AACE,aAAO;AACLC,QAAAA,OAAO,EAAE,KADJ;AAELC,QAAAA,YAAY,EAAEH,MAAM,CAACI,OAAP,CAAeD,YAFxB;AAGLE,QAAAA,cAAc,EAAEL,MAAM,CAACI,OAAP,CAAeC;AAH1B,OAAP;;AAKF,SAAK,gBAAL;AACE,6CACKN,KADL;AAEEG,QAAAA,OAAO,EAAE,KAFX;AAGEI,QAAAA,QAAQ,EAAEN,MAAM,CAACI,OAAP,CAAeE;AAH3B;;AAKF,SAAK,UAAL;AACE,6CACKP,KADL;AAEEG,QAAAA,OAAO,EAAE,KAFX;AAGEK,QAAAA,YAAY,EAAEP,MAAM,CAACI,OAAP,CAAeG,YAH/B;AAIEC,QAAAA,eAAe,EAAER,MAAM,CAACI,OAAP,CAAeI,eAJlC;AAKEC,QAAAA,YAAY,EAAET,MAAM,CAACI,OAAP,CAAeK,YAL/B;AAMEC,QAAAA,iBAAiB,EAAEV,MAAM,CAACI,OAAP,CAAeM,iBANpC;AAOEC,QAAAA,WAAW,EAAEX,MAAM,CAACI,OAAP,CAAeO;AAP9B;;AASF,SAAK,cAAL;AACE,6CAAYZ,KAAZ;AAAmBG,QAAAA,OAAO,EAAE;AAA5B;;AACF,SAAK,iBAAL;AACE,6CAAYH,KAAZ;AAAmBG,QAAAA,OAAO,EAAE;AAA5B;;AACF,SAAK,SAAL;AACE,6CAAYH,KAAZ;AAAmBG,QAAAA,OAAO,EAAE;AAA5B;;AACF;AACE,aAAOH,KAAP;AA9BJ;AAgCD,CAjCD;;AAmCA,IAAMa,eAAe,GAAG,SAAlBA,eAAkB,CAACC,UAAD,EAAgB;AACtC,MAAIV,YAAY,GAAG,EAAnB;;AACA,MAAIU,UAAJ,EAAgB;AACd,QAAMC,WAAW,GAAG,IAAIC,IAAJ,EAApB;AACAZ,IAAAA,YAAY,GAAGU,UAAU,CAACG,MAAX,CAAkB,UAACV,QAAD,EAAc;AAC7C,aAAOA,QAAQ,CAACC,YAAT,IAAyBO,WAAhC;AACD,KAFc,CAAf;AAGD;;AAED,SAAOX,YAAY,CAACc,MAAb,GAAsBd,YAAY,CAAC,CAAD,CAAlC,GAAwC,IAA/C;AACD,CAVD;;AAYA,IAAMe,iBAAiB,GAAG,SAApBA,iBAAoB,CAACL,UAAD,EAAgB;AACxC,MAAIR,cAAc,GAAG,EAArB;;AACA,MAAIQ,UAAJ,EAAgB;AACd,QAAMC,WAAW,GAAG,IAAIC,IAAJ,EAApB;AACAV,IAAAA,cAAc,GAAGQ,UAAU,CAACG,MAAX,CAAkB,UAACV,QAAD,EAAc;AAC/C,aAAOA,QAAQ,CAACC,YAAT,GAAwBO,WAA/B;AACD,KAFgB,CAAjB;AAGD;;AAED,SAAOT,cAAP;AACD,CAVD;;AAYA,IAAMc,aAAa,GAAG,SAAhBA,aAAgB,CAACC,QAAD;AAAA,SAAc,iBAAOC,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAClCD,YAAAA,QAAQ,CAAC;AAAEnB,cAAAA,IAAI,EAAE;AAAR,aAAD,CAAR;AACAqB,YAAAA,OAAO,CAACC,GAAR,+BAAwCF,UAAxC;AAFkC;AAAA,6CAIX5B,wBAAwB,CAC7CI,OAAO,CAAC2B,UAAR,CAAmBC,MAD0B,EAE7C5B,OAAO,CAAC6B,cAAR,CAAuBC,EAFsB,EAG7C9B,OAAO,CAAC2B,UAAR,CAAmBI,UAH0B,EAI7CP,UAJ6C,CAJb;;AAAA;AAI5Bf,YAAAA,QAJ4B;AAWlCc,YAAAA,QAAQ,CAAC;AAAEnB,cAAAA,IAAI,EAAE,gBAAR;AAA0BG,cAAAA,OAAO,EAAE;AAAEE,gBAAAA,QAAQ,EAARA;AAAF;AAAnC,aAAD,CAAR;AAXkC,6CAY3BA,QAZ2B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAd;AAAA,CAAtB;;AAeA,IAAMuB,eAAe,GAAG,SAAlBA,eAAkB,CAACT,QAAD;AAAA,SAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AACpCA,YAAAA,QAAQ,CAAC;AAAEnB,cAAAA,IAAI,EAAE;AAAR,aAAD,CAAR;AACAqB,YAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AAFoC;AAAA,6CAIX7B,kBAAkB,CACzCG,OAAO,CAAC2B,UAAR,CAAmBC,MADsB,EAEzC5B,OAAO,CAAC6B,cAAR,CAAuBC,EAFkB,EAGzC9B,OAAO,CAAC2B,UAAR,CAAmBI,UAHsB,CAJP;;AAAA;AAI9Bf,YAAAA,UAJ8B;AAU9BV,YAAAA,YAV8B,GAUfS,eAAe,CAACC,UAAD,CAVA;AAW9BR,YAAAA,cAX8B,GAWba,iBAAiB,CAACL,UAAD,CAXJ;AAapCO,YAAAA,QAAQ,CAAC;AACPnB,cAAAA,IAAI,EAAE,kBADC;AAEPG,cAAAA,OAAO,EAAE;AAAED,gBAAAA,YAAY,EAAZA,YAAF;AAAgBE,gBAAAA,cAAc,EAAdA;AAAhB;AAFF,aAAD,CAAR;;AAboC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAd;AAAA,CAAxB;;AAmBA,IAAMyB,eAAe,GACnB,SADIA,eACJ,CAACV,QAAD;AAAA,SACA,kBACEb,YADF,EAEEwB,eAFF,EAGEC,eAHF,EAIEvB,YAJF,EAKEC,iBALF,EAMEC,WANF;AAAA;AAAA;AAAA;AAAA;AAAA;AAQQsB,YAAAA,aARR,GAQwB,IAAIlB,IAAJ,CACpBgB,eAAe,CAACG,WAAhB,EADoB,EAEpBH,eAAe,CAACI,QAAhB,EAFoB,EAGpBJ,eAAe,CAACK,OAAhB,EAHoB,EAIpBJ,eAAe,CAACK,QAAhB,EAJoB,EAKpBL,eAAe,CAACM,UAAhB,EALoB,CARxB;AAgBElB,YAAAA,QAAQ,CAAC;AACPnB,cAAAA,IAAI,EAAE,UADC;AAEPG,cAAAA,OAAO,EAAE;AACPG,gBAAAA,YAAY,EAAZA,YADO;AAEPC,gBAAAA,eAAe,EAAEyB,aAFV;AAGPxB,gBAAAA,YAAY,EAAZA,YAHO;AAIPC,gBAAAA,iBAAiB,EAAjBA,iBAJO;AAKPC,gBAAAA,WAAW,EAAXA;AALO;AAFF,aAAD,CAAR;;AAhBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADA;AAAA,CADF;;AA8BA,IAAM4B,cAAc,GAClB,SADIA,cACJ,CAACnB,QAAD;AAAA,SACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAASd,YAAAA,QAAT,QAASA,QAAT;AACEc,YAAAA,QAAQ,CAAC;AAAEnB,cAAAA,IAAI,EAAE;AAAR,aAAD,CAAR;AACAqB,YAAAA,OAAO,CAACC,GAAR,6BAAsCiB,IAAI,CAACC,SAAL,CAAenC,QAAf,CAAtC;AAEAX,YAAAA,uBAAuB,CACrBE,OAAO,CAAC2B,UAAR,CAAmBC,MADE,EAErB5B,OAAO,CAAC6B,cAAR,CAAuBC,EAFF,EAGrB9B,OAAO,CAAC2B,UAAR,CAAmBI,UAHE,EAIrBtB,QAJqB,CAAvB,CAKEoC,IALF,CAKO,YAAM;AACXpB,cAAAA,OAAO,CAACC,GAAR,CAAY,wCAAZ;AACAH,cAAAA,QAAQ,CAAC;AAAEnB,gBAAAA,IAAI,EAAE;AAAR,eAAD,CAAR;AAED,aATD;;AAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADA;AAAA,CADF;;AAkBA,IAAM0C,cAAc,GAClB,SADIA,cACJ,CAACvB,QAAD;AAAA,SACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,YAAAA,UAAT,SAASA,UAAT,EAAqBf,QAArB,SAAqBA,QAArB;AACEc,YAAAA,QAAQ,CAAC;AAAEnB,cAAAA,IAAI,EAAE;AAAR,aAAD,CAAR;AACAqB,YAAAA,OAAO,CAACC,GAAR,yBAAkCiB,IAAI,CAACC,SAAL,CAAenC,QAAf,CAAlC;AAEAV,YAAAA,wBAAwB,CACtBC,OAAO,CAAC2B,UAAR,CAAmBC,MADG,EAEtB5B,OAAO,CAAC6B,cAAR,CAAuBC,EAFD,EAGtB9B,OAAO,CAAC2B,UAAR,CAAmBI,UAHG,EAItBP,UAJsB,EAKtBf,QALsB,CAAxB,CAMEoC,IANF,CAMO,YAAM;AACXtB,cAAAA,QAAQ,CAAC;AAAEnB,gBAAAA,IAAI,EAAE;AAAR,eAAD,CAAR;AACD,aARD;;AAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADA;AAAA,CADF;;AAiBA,IAAM2C,cAAc,GAClB,SADIA,cACJ,CAACxB,QAAD;AAAA,SACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,YAAAA,UAAT,SAASA,UAAT;AACED,YAAAA,QAAQ,CAAC;AAAEnB,cAAAA,IAAI,EAAE;AAAR,aAAD,CAAR;AACAqB,YAAAA,OAAO,CAACC,GAAR,iCAA0CF,UAA1C;AAEA7B,YAAAA,wBAAwB,CACtBK,OAAO,CAAC2B,UAAR,CAAmBC,MADG,EAEtB5B,OAAO,CAAC6B,cAAR,CAAuBC,EAFD,EAGtB9B,OAAO,CAAC2B,UAAR,CAAmBI,UAHG,EAItBP,UAJsB,CAAxB,CAKEqB,IALF,CAKO,YAAM;AACXtB,cAAAA,QAAQ,CAAC;AAAEnB,gBAAAA,IAAI,EAAE;AAAR,eAAD,CAAR;AAED,aARD;;AAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADA;AAAA,CADF;;AAiBO,yBAA8BV,iBAAiB,CACpDO,eADoD,EAEpD;AACE+B,EAAAA,eAAe,EAAfA,eADF;AAEEV,EAAAA,aAAa,EAAbA,aAFF;AAGEW,EAAAA,eAAe,EAAfA,eAHF;AAIES,EAAAA,cAAc,EAAdA,cAJF;AAKEI,EAAAA,cAAc,EAAdA,cALF;AAMEC,EAAAA,cAAc,EAAdA;AANF,CAFoD,EAUpD;AAAE/B,EAAAA,UAAU,EAAE,IAAd;AAAoBX,EAAAA,OAAO,EAAE,KAA7B;AAAoCI,EAAAA,QAAQ,EAAE;AAA9C,CAVoD,CAA/C;AAAA,IAAQuC,QAAR,sBAAQA,QAAR;AAAA,IAAkBC,OAAlB,sBAAkBA,OAAlB","sourcesContent":["import createDataContext from './createDataContext';\nimport {\n  deleteDocInSubcollection,\n  getByIdFromSubcollection,\n  getGroupDeliveries,\n  insertIntoSubcollection,\n  updateDocInSubcollection,\n} from '../api/firebase';\nimport GLOBALS from '../Globals';\n\nconst deliveryReducer = (state, action) => {\n  switch (action.type) {\n    case 'fetch_deliveries':\n      return {\n        loading: false,\n        nextDelivery: action.payload.nextDelivery,\n        lastDeliveries: action.payload.lastDeliveries,\n      };\n    case 'fetch_delivery':\n      return {\n        ...state,\n        loading: false,\n        delivery: action.payload.delivery,\n      };\n    case 'set_info':\n      return {\n        ...state,\n        loading: false,\n        deliveryDate: action.payload.deliveryDate,\n        ordersLimitDate: action.payload.ordersLimitDate,\n        baseProducts: action.payload.baseProducts,\n        baseProductsPrice: action.payload.baseProductsPrice,\n        deliveryFee: action.payload.deliveryFee,\n      };\n    case 'add_delivery':\n      return { ...state, loading: false };\n    case 'delete_delivery':\n      return { ...state, loading: false };\n    case 'loading':\n      return { ...state, loading: true };\n    default:\n      return state;\n  }\n};\n\nconst getNextDelivery = (deliveries) => {\n  let nextDelivery = [];\n  if (deliveries) {\n    const currentDate = new Date();\n    nextDelivery = deliveries.filter((delivery) => {\n      return delivery.deliveryDate >= currentDate;\n    });\n  }\n\n  return nextDelivery.length ? nextDelivery[0] : null;\n};\n\nconst getLastDeliveries = (deliveries) => {\n  let lastDeliveries = [];\n  if (deliveries) {\n    const currentDate = new Date();\n    lastDeliveries = deliveries.filter((delivery) => {\n      return delivery.deliveryDate < currentDate;\n    });\n  }\n\n  return lastDeliveries;\n};\n\nconst fetchDelivery = (dispatch) => async (deliveryId) => {\n  dispatch({ type: 'loading' });\n  console.log(`Fetching delivery by id: ${deliveryId}...`);\n\n  const delivery = await getByIdFromSubcollection(\n    GLOBALS.COLLECTION.GROUPS,\n    GLOBALS.CONSUMER_GROUP.ID,\n    GLOBALS.COLLECTION.DELIVERIES,\n    deliveryId\n  );\n\n  dispatch({ type: 'fetch_delivery', payload: { delivery } });\n  return delivery;\n};\n\nconst fetchDeliveries = (dispatch) => async () => {\n  dispatch({ type: 'loading' });\n  console.log('Fetching deliveries...');\n\n  const deliveries = await getGroupDeliveries(\n    GLOBALS.COLLECTION.GROUPS,\n    GLOBALS.CONSUMER_GROUP.ID,\n    GLOBALS.COLLECTION.DELIVERIES\n  );\n\n  const nextDelivery = getNextDelivery(deliveries);\n  const lastDeliveries = getLastDeliveries(deliveries);\n\n  dispatch({\n    type: 'fetch_deliveries',\n    payload: { nextDelivery, lastDeliveries },\n  });\n};\n\nconst setDeliveryInfo =\n  (dispatch) =>\n  async (\n    deliveryDate,\n    ordersDateLimit,\n    ordersTimeLimit,\n    baseProducts,\n    baseProductsPrice,\n    deliveryFee\n  ) => {\n    const limitDateTime = new Date(\n      ordersDateLimit.getFullYear(),\n      ordersDateLimit.getMonth(),\n      ordersDateLimit.getDate(),\n      ordersTimeLimit.getHours(),\n      ordersTimeLimit.getMinutes()\n    );\n\n    dispatch({\n      type: 'set_info',\n      payload: {\n        deliveryDate,\n        ordersLimitDate: limitDateTime,\n        baseProducts,\n        baseProductsPrice,\n        deliveryFee,\n      },\n    });\n  };\n\nconst createDelivery =\n  (dispatch) =>\n  async ({ delivery }) => {\n    dispatch({ type: 'loading' });\n    console.log(`Creating new delivery: ${JSON.stringify(delivery)}`);\n\n    insertIntoSubcollection(\n      GLOBALS.COLLECTION.GROUPS,\n      GLOBALS.CONSUMER_GROUP.ID,\n      GLOBALS.COLLECTION.DELIVERIES,\n      delivery\n    ).then(() => {\n      console.log('[createDelivery delivery context] then');\n      dispatch({ type: 'add_delivery' });\n      // navigate('Deliveries');\n    });\n  };\n\nconst updateDelivery =\n  (dispatch) =>\n  async ({ deliveryId, delivery }) => {\n    dispatch({ type: 'loading' });\n    console.log(`Updating delivery: ${JSON.stringify(delivery)}`);\n\n    updateDocInSubcollection(\n      GLOBALS.COLLECTION.GROUPS,\n      GLOBALS.CONSUMER_GROUP.ID,\n      GLOBALS.COLLECTION.DELIVERIES,\n      deliveryId,\n      delivery\n    ).then(() => {\n      dispatch({ type: 'add_delivery' });\n    });\n  };\n\nconst deleteDelivery =\n  (dispatch) =>\n  async ({ deliveryId }) => {\n    dispatch({ type: 'loading' });\n    console.log(`Deleting delivery with id: ${deliveryId}`);\n\n    deleteDocInSubcollection(\n      GLOBALS.COLLECTION.GROUPS,\n      GLOBALS.CONSUMER_GROUP.ID,\n      GLOBALS.COLLECTION.DELIVERIES,\n      deliveryId\n    ).then(() => {\n      dispatch({ type: 'delete_delivery' });\n      // navigate('Deliveries');\n    });\n  };\n\nexport const { Provider, Context } = createDataContext(\n  deliveryReducer,\n  {\n    fetchDeliveries,\n    fetchDelivery,\n    setDeliveryInfo,\n    createDelivery,\n    updateDelivery,\n    deleteDelivery,\n  },\n  { deliveries: null, loading: false, delivery: null }\n);\n"]},"metadata":{},"sourceType":"module"}