{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/bordi/projects/cestas-cooperflora-rn/node_modules/react-native-simple-dialogs/src/ConfirmDialog.js\";\nvar _excluded = [\"backgroundColor\", \"backgroundColorDisabled\"],\n    _excluded2 = [\"color\", \"colorDisabled\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport { ViewPropTypes } from \"react-native-web/dist/index\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar OS = Platform.OS;\nimport PropTypes from 'prop-types';\nimport Dialog from \"./Dialog\";\nimport TouchableEffect from \"./TouchableEffect\";\nvar DEFAULT_COLOR_BUTTON = \"#0000FF99\";\nvar DEFAULT_BACKGROUNDCOLOR_BUTTON = \"transparent\";\n\nvar ConfirmDialog = function (_Component) {\n  _inherits(ConfirmDialog, _Component);\n\n  var _super = _createSuper(ConfirmDialog);\n\n  function ConfirmDialog() {\n    var _this;\n\n    _classCallCheck(this, ConfirmDialog);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.getButtonStyle = function (button, positive) {\n      var disabled = button.disabled;\n      var style = button.style || {};\n\n      var backgroundColor = style.backgroundColor,\n          backgroundColorDisabled = style.backgroundColorDisabled,\n          othersStyle = _objectWithoutProperties(style, _excluded);\n\n      return Platform.select({\n        ios: _objectSpread({\n          height: 46,\n          justifyContent: \"center\",\n          backgroundColor: (!disabled ? backgroundColor : backgroundColorDisabled || backgroundColor) || DEFAULT_BACKGROUNDCOLOR_BUTTON\n        }, othersStyle),\n        android: _objectSpread({\n          backgroundColor: (!disabled ? backgroundColor : backgroundColorDisabled || backgroundColor) || DEFAULT_BACKGROUNDCOLOR_BUTTON\n        }, othersStyle)\n      });\n    };\n\n    _this.getButtonTextStyle = function (button, positive) {\n      var disabled = button.disabled;\n      var titleStyle = button.titleStyle || {};\n\n      var color = titleStyle.color,\n          colorDisabled = titleStyle.colorDisabled,\n          othersStyle = _objectWithoutProperties(titleStyle, _excluded2);\n\n      return Platform.select({\n        ios: _objectSpread({\n          textAlign: \"center\",\n          textAlignVertical: \"center\",\n          color: (!disabled ? color : colorDisabled || color) || DEFAULT_COLOR_BUTTON,\n          fontWeight: positive ? \"bold\" : \"normal\"\n        }, othersStyle),\n        android: _objectSpread({\n          height: 36,\n          minWidth: 64,\n          padding: 8,\n          textAlign: \"center\",\n          textAlignVertical: \"center\",\n          color: (!disabled ? color : colorDisabled || color) || DEFAULT_COLOR_BUTTON,\n          fontWeight: \"bold\",\n          textTransform: \"uppercase\"\n        }, othersStyle)\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ConfirmDialog, [{\n    key: \"renderMessage\",\n    value: function renderMessage() {\n      var _this$props = this.props,\n          message = _this$props.message,\n          messageStyle = _this$props.messageStyle;\n      var textAlign = OS === 'ios' ? \"center\" : null;\n      if (message) return React.createElement(Text, {\n        style: [{\n          textAlign: textAlign,\n          color: \"#00000089\",\n          fontSize: 18\n        }, messageStyle],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }\n      }, message);\n    }\n  }, {\n    key: \"renderButton\",\n    value: function renderButton(button, positive) {\n      if (button) {\n        var onPress = button.onPress,\n            disabled = button.disabled,\n            color = button.color;\n        var containerStyle = this.getButtonStyle(button, positive);\n        var textStyle = this.getButtonTextStyle(button, positive);\n        var touchableStyle = OS === 'ios' ? {\n          flex: 1\n        } : {};\n        return React.createElement(TouchableEffect, {\n          onPress: onPress,\n          disabled: disabled,\n          style: touchableStyle,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 17\n          }\n        }, React.createElement(View, {\n          style: containerStyle,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 21\n          }\n        }, React.createElement(Text, {\n          style: textStyle,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 25\n          }\n        }, button.title)));\n      }\n    }\n  }, {\n    key: \"renderButtons\",\n    value: function renderButtons() {\n      var _this$props2 = this.props,\n          negativeButton = _this$props2.negativeButton,\n          positiveButton = _this$props2.positiveButton;\n      var containerStyle = OS === 'ios' ? {\n        flexDirection: \"row\"\n      } : {\n        flexDirection: \"row\",\n        justifyContent: \"flex-end\",\n        height: 36\n      };\n      var dividerVertStyle = OS === 'ios' ? {\n        width: negativeButton ? 1 : 0,\n        backgroundColor: \"#00000011\"\n      } : {\n        width: 8\n      };\n      var dividerHoriStyle = OS === 'ios' ? {\n        height: 1,\n        backgroundColor: \"#00000011\"\n      } : {\n        height: 0\n      };\n      return React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }\n      }, React.createElement(View, {\n        style: dividerHoriStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 17\n        }\n      }), React.createElement(View, {\n        style: containerStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 17\n        }\n      }, this.renderButton(negativeButton, false), React.createElement(View, {\n        style: dividerVertStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }\n      }), this.renderButton(positiveButton, true)));\n    }\n  }, {\n    key: \"renderContent\",\n    value: function renderContent() {\n      var children = this.props.children;\n      if (children) return children;else return this.renderMessage();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Dialog, _extends({}, this.props, {\n        buttons: this.renderButtons(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 13\n        }\n      }), this.renderContent());\n    }\n  }]);\n\n  return ConfirmDialog;\n}(Component);\n\nvar buttonPropType = PropTypes.shape({\n  title: PropTypes.string.isRequired,\n  onPress: PropTypes.func.isRequired,\n  disabled: PropTypes.bool,\n  titleStyle: PropTypes.shape(_objectSpread(_objectSpread({}, Text.propTypes.style), {}, {\n    colorDisabled: PropTypes.string\n  })),\n  style: PropTypes.shape(_objectSpread(_objectSpread({}, ViewPropTypes.style), {}, {\n    backgroundColorDisabled: PropTypes.string\n  }))\n});\nConfirmDialog.propTypes = _objectSpread(_objectSpread({}, Dialog.propTypes), {}, {\n  message: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  messageStyle: Text.propTypes.style,\n  negativeButton: buttonPropType,\n  positiveButton: buttonPropType.isRequired\n});\nexport default ConfirmDialog;","map":{"version":3,"sources":["/home/bordi/projects/cestas-cooperflora-rn/node_modules/react-native-simple-dialogs/src/ConfirmDialog.js"],"names":["React","Component","ViewPropTypes","OS","Platform","PropTypes","Dialog","TouchableEffect","DEFAULT_COLOR_BUTTON","DEFAULT_BACKGROUNDCOLOR_BUTTON","ConfirmDialog","getButtonStyle","button","positive","disabled","style","backgroundColor","backgroundColorDisabled","othersStyle","select","ios","height","justifyContent","android","getButtonTextStyle","titleStyle","color","colorDisabled","textAlign","textAlignVertical","fontWeight","minWidth","padding","textTransform","props","message","messageStyle","fontSize","onPress","containerStyle","textStyle","touchableStyle","flex","title","negativeButton","positiveButton","flexDirection","dividerVertStyle","width","dividerHoriStyle","renderButton","children","renderMessage","renderButtons","renderContent","buttonPropType","shape","string","isRequired","func","bool","Text","propTypes","oneOfType","element"],"mappings":"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","sourcesContent":["/**\n* MIT License\n*\n* Copyright (c) 2017 Douglas Nassif Roma Junior\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport React, { Component } from 'react'\nimport {\n    View,\n    ViewPropTypes,\n    Text,\n    Platform\n} from 'react-native'\nconst { OS } = Platform;\n\nimport PropTypes from 'prop-types';\n\nimport Dialog from './Dialog'\nimport TouchableEffect from './TouchableEffect';\n\nconst DEFAULT_COLOR_BUTTON = \"#0000FF99\";\nconst DEFAULT_BACKGROUNDCOLOR_BUTTON = \"transparent\";\n\nclass ConfirmDialog extends Component {\n\n    getButtonStyle = (button, positive) => {\n        const { disabled } = button;\n        const style = button.style || {};\n        const { backgroundColor, backgroundColorDisabled, ...othersStyle } = style;\n        return Platform.select({\n            ios: {\n                height: 46,\n                justifyContent: \"center\",\n                backgroundColor: (!disabled ? backgroundColor : (backgroundColorDisabled || backgroundColor)) || DEFAULT_BACKGROUNDCOLOR_BUTTON,\n                ...othersStyle\n            },\n            android: {\n                backgroundColor: (!disabled ? backgroundColor : (backgroundColorDisabled || backgroundColor)) || DEFAULT_BACKGROUNDCOLOR_BUTTON,\n                ...othersStyle\n            }\n        })\n    }\n\n    getButtonTextStyle = (button, positive) => {\n        const { disabled } = button;\n        const titleStyle = button.titleStyle || {};\n        const { color, colorDisabled, ...othersStyle } = titleStyle;\n        return Platform.select({\n            ios: {\n                textAlign: \"center\",\n                textAlignVertical: \"center\",\n                color: (!disabled ? color : (colorDisabled || color)) || DEFAULT_COLOR_BUTTON,\n                fontWeight: positive ? \"bold\" : \"normal\",\n                ...othersStyle\n            },\n            android: {\n                height: 36,\n                minWidth: 64,\n                padding: 8,\n                textAlign: \"center\",\n                textAlignVertical: \"center\",\n                color: (!disabled ? color : (colorDisabled || color)) || DEFAULT_COLOR_BUTTON,\n                fontWeight: \"bold\",\n                textTransform: \"uppercase\",\n                ...othersStyle\n            }\n        });\n    }\n\n    renderMessage() {\n        const { message, messageStyle } = this.props;\n\n        const textAlign = OS === 'ios' ? \"center\" : null;\n\n        if (message)\n            return (<Text style={[{ textAlign, color: \"#00000089\", fontSize: 18 }, messageStyle]}>{message}</Text>)\n    }\n\n    renderButton(button, positive) {\n        if (button) {\n            const { onPress, disabled, color, } = button;\n\n            const containerStyle = this.getButtonStyle(button, positive);\n\n            const textStyle = this.getButtonTextStyle(button, positive);\n\n            const touchableStyle = OS === 'ios' ?\n                { flex: 1 } :\n                {};\n\n            return (\n                <TouchableEffect onPress={onPress} disabled={disabled} style={touchableStyle}>\n                    <View style={containerStyle}>\n                        <Text style={textStyle} >{button.title}</Text>\n                    </View>\n                </TouchableEffect>\n            )\n        }\n    }\n\n    renderButtons() {\n        const { negativeButton, positiveButton } = this.props;\n\n        const containerStyle = OS === 'ios' ?\n            { flexDirection: \"row\" } :\n            { flexDirection: \"row\", justifyContent: \"flex-end\", height: 36 }\n\n        const dividerVertStyle = OS === 'ios' ?\n            { width: negativeButton ? 1 : 0, backgroundColor: \"#00000011\" } :\n            { width: 8 }\n\n        const dividerHoriStyle = OS === 'ios' ?\n            { height: 1, backgroundColor: \"#00000011\" } :\n            { height: 0 }\n\n        return (\n            <View>\n                <View style={dividerHoriStyle}></View>\n                <View style={containerStyle}>\n                    {this.renderButton(negativeButton, false)}\n                    <View style={dividerVertStyle}></View>\n                    {this.renderButton(positiveButton, true)}\n                </View>\n            </View>\n        )\n    }\n\n    renderContent() {\n        const { children } = this.props;\n\n        if (children)\n            return children;\n        else\n            return this.renderMessage();\n    }\n\n    render() {\n        return (\n            <Dialog {...this.props}\n                buttons={this.renderButtons()} >\n                {this.renderContent()}\n            </Dialog>\n        )\n    }\n}\n\nconst buttonPropType = PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    onPress: PropTypes.func.isRequired,\n    disabled: PropTypes.bool,\n    titleStyle: PropTypes.shape({\n        ...Text.propTypes.style,\n        colorDisabled: PropTypes.string,\n    }),\n    style: PropTypes.shape({\n        ...ViewPropTypes.style,\n        backgroundColorDisabled: PropTypes.string,\n    })\n});\n\nConfirmDialog.propTypes = {\n    ...Dialog.propTypes,\n    message: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n    messageStyle: Text.propTypes.style,\n    negativeButton: buttonPropType,\n    positiveButton: buttonPropType.isRequired\n}\n\nexport default ConfirmDialog\n"]},"metadata":{},"sourceType":"module"}