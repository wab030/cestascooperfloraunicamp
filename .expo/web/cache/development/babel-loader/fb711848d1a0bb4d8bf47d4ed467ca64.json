{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useContext } from 'react';\nimport Constants from 'expo-constants';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport * as Notifications from 'expo-notifications';\nimport { Context as UserContext } from \"./context/UserContext\";\nexport var accessibilityLabel = function accessibilityLabel(id) {\n  if (Platform.OS === 'android') {\n    return {\n      accessibilityLabel: id\n    };\n  }\n\n  if (Platform.OS === 'ios') {\n    return {\n      testID: id\n    };\n  }\n\n  return null;\n};\nexport var setPushNotificationToken = function setPushNotificationToken() {\n  var token, _await$Notifications$, existingStatus, finalStatus, _await$Notifications$2, status;\n\n  return _regeneratorRuntime.async(function setPushNotificationToken$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!Constants.isDevice) {\n            _context.next = 20;\n            break;\n          }\n\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(Notifications.getPermissionsAsync());\n\n        case 3:\n          _await$Notifications$ = _context.sent;\n          existingStatus = _await$Notifications$.status;\n          finalStatus = existingStatus;\n\n          if (!(existingStatus !== 'granted')) {\n            _context.next = 12;\n            break;\n          }\n\n          _context.next = 9;\n          return _regeneratorRuntime.awrap(Notifications.requestPermissionsAsync());\n\n        case 9:\n          _await$Notifications$2 = _context.sent;\n          status = _await$Notifications$2.status;\n          finalStatus = status;\n\n        case 12:\n          if (!(finalStatus !== 'granted')) {\n            _context.next = 15;\n            break;\n          }\n\n          Alert.alert('Falha para conseguir permissão para notificação!');\n          return _context.abrupt(\"return\");\n\n        case 15:\n          _context.next = 17;\n          return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n\n        case 17:\n          token = _context.sent.data;\n          _context.next = 21;\n          break;\n\n        case 20:\n          Alert.alert('Esse recurso não funciona para emuladores.');\n\n        case 21:\n          if (Platform.OS === 'android') {\n            Notifications.setNotificationChannelAsync('default', {\n              name: 'default',\n              importance: Notifications.AndroidImportance.MAX,\n              vibrationPattern: [0, 250, 250, 250],\n              lightColor: '#FF231F7C'\n            });\n          }\n\n          return _context.abrupt(\"return\", token);\n\n        case 23:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var sendPushNotification = function sendPushNotification(users) {\n  var message;\n  return _regeneratorRuntime.async(function sendPushNotification$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          console.log('Enviando notificação para as consumidoras e os consumidores!');\n          message = {\n            sound: 'default',\n            title: 'Nova entrega de cesta orgânica da cooperativa Cooperflora.',\n            body: 'Você já pode informar se gostaria de pegar a sua cesta orgânica na próxima entrega!',\n            data: {\n              someData: 'goes here'\n            }\n          };\n          users.map(function _callee(user) {\n            return _regeneratorRuntime.async(function _callee$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    if (!user.pushNotificationToken) {\n                      _context2.next = 5;\n                      break;\n                    }\n\n                    console.log('Enviando notificação para', user.name);\n                    message.to = user.pushNotificationToken;\n                    _context2.next = 5;\n                    return _regeneratorRuntime.awrap(fetch('https://exp.host/--/api/v2/push/send', {\n                      method: 'POST',\n                      headers: {\n                        Accept: 'application/json',\n                        'Accept-encoding': 'gzip, deflate',\n                        'Content-Type': 'application/json'\n                      },\n                      body: JSON.stringify(message)\n                    }));\n\n                  case 5:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          });\n\n        case 3:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"sources":["/home/bordi/projects/cestas-cooperflora-rn/src/utils.js"],"names":["useContext","Constants","Notifications","Context","UserContext","accessibilityLabel","id","Platform","OS","testID","setPushNotificationToken","isDevice","getPermissionsAsync","existingStatus","status","finalStatus","requestPermissionsAsync","Alert","alert","getExpoPushTokenAsync","token","data","setNotificationChannelAsync","name","importance","AndroidImportance","MAX","vibrationPattern","lightColor","sendPushNotification","users","console","log","message","sound","title","body","someData","map","user","pushNotificationToken","to","fetch","method","headers","Accept","JSON","stringify"],"mappings":"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","sourcesContent":["import { useContext } from 'react';\nimport Constants from 'expo-constants';\nimport { Alert, Platform } from 'react-native';\nimport * as Notifications from 'expo-notifications';\nimport { Context as UserContext } from './context/UserContext';\n\nexport const accessibilityLabel = (id) => {\n  if (Platform.OS === 'android') {\n    return { accessibilityLabel: id };\n  }\n  if (Platform.OS === 'ios') {\n    return { testID: id };\n  }\n  return null;\n};\n\nexport const setPushNotificationToken = async () => {\n  let token;\n  if (Constants.isDevice) {\n    const { status: existingStatus } =\n      await Notifications.getPermissionsAsync();\n    let finalStatus = existingStatus;\n    if (existingStatus !== 'granted') {\n      const { status } = await Notifications.requestPermissionsAsync();\n      finalStatus = status;\n    }\n    if (finalStatus !== 'granted') {\n      Alert.alert('Falha para conseguir permissão para notificação!');\n      return;\n    }\n    token = (await Notifications.getExpoPushTokenAsync()).data;\n  } else {\n    Alert.alert('Esse recurso não funciona para emuladores.');\n  }\n\n  if (Platform.OS === 'android') {\n    Notifications.setNotificationChannelAsync('default', {\n      name: 'default',\n      importance: Notifications.AndroidImportance.MAX,\n      vibrationPattern: [0, 250, 250, 250],\n      lightColor: '#FF231F7C',\n    });\n  }\n  return token;\n};\n\nexport const sendPushNotification = async (users) => {\n  console.log('Enviando notificação para as consumidoras e os consumidores!');\n  const message = {\n    // to: expoPushToken,\n    sound: 'default',\n    title: 'Nova entrega de cesta orgânica da cooperativa Cooperflora.',\n    body: 'Você já pode informar se gostaria de pegar a sua cesta orgânica na próxima entrega!',\n    data: { someData: 'goes here' },\n  };\n\n  users.map(async (user) => {\n    if (user.pushNotificationToken) {\n      console.log('Enviando notificação para', user.name);\n      message.to = user.pushNotificationToken;\n      await fetch('https://exp.host/--/api/v2/push/send', {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json',\n          'Accept-encoding': 'gzip, deflate',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(message),\n      });\n    }\n  });\n};\n"]},"metadata":{},"sourceType":"module"}