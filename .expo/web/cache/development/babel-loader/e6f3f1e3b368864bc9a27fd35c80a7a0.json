{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/bordi/projects/cestas-cooperflora-rn/src/screens/delivery/DeliveriesScreen.js\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useContext, useState } from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Divider } from 'react-native-elements';\nimport { useFocusEffect } from '@react-navigation/native';\nimport { isAfter } from 'date-fns';\nimport Spinner from \"../../components/Spinner\";\nimport ConsumerGroupDetails from \"../../components/ConsumerGroupDetails\";\nimport MainHeader from \"../../components/MainHeader\";\nimport Button from \"../../components/Button\";\nimport { Context as DeliveryContext } from \"../../context/DeliveryContext\";\nimport { Context as OrderContext } from \"../../context/OrderContext\";\nimport useUser from \"../../hooks/useUser\";\nimport DeliveryCard from \"../../components/DeliveryCard\";\nimport GLOBALS from \"../../Globals\";\nimport BasketProductsImage from \"../../../assets/images/basketproducts.png\";\nimport Colors from \"../../constants/Colors\";\nimport { stardardScreenStyle as screen } from \"../screenstyles/ScreenStyles\";\nimport { showAlert } from \"../../helper/HelperFunctions\";\n\nvar DeliveriesScreen = function DeliveriesScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      refreshing = _useState2[0],\n      setRefreshing = _useState2[1];\n\n  var user = useUser();\n\n  var _useContext = useContext(DeliveryContext),\n      _useContext$state = _useContext.state,\n      nextDelivery = _useContext$state.nextDelivery,\n      lastDeliveries = _useContext$state.lastDeliveries,\n      loading = _useContext$state.loading,\n      fetchDeliveries = _useContext.fetchDeliveries;\n\n  var _useContext2 = useContext(OrderContext),\n      orderLoading = _useContext2.state.loading,\n      getUserOrder = _useContext2.getUserOrder,\n      startOrder = _useContext2.startOrder;\n\n  useFocusEffect(React.useCallback(function () {\n    fetchDeliveries();\n  }, []));\n\n  var renderButtonOrMessage = function renderButtonOrMessage() {\n    if (user && user.role === GLOBALS.USER.ROLE.ORGANIZER) {\n      return React.createElement(View, {\n        style: styles.buttonContainer,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 9\n        }\n      }, React.createElement(Button, {\n        id: \"addNextDeliveryButton\",\n        style: styles.button,\n        textColor: \"white\",\n        onPress: function onPress() {\n          return navigation.navigate('DeliveryManagement', {\n            screen: 'CreateDeliveryScreen'\n          });\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }\n      }, \"Adicionar pr\\xF3xima entrega\"));\n    }\n\n    return React.createElement(Text, {\n      style: styles.nextDeliveryButton,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 7\n      }\n    }, \"A pr\\xF3xima entrega ainda n\\xE3o foi agendada.\");\n  };\n\n  var editDelivery = function editDelivery(delivery) {\n    navigation.navigate('DeliveryManagement', {\n      params: {\n        delivery: delivery\n      },\n      screen: 'CreateDeliveryScreen'\n    });\n  };\n\n  var onNextDeliveryCardClick = function onNextDeliveryCardClick(delivery) {\n    var order, currentDate;\n    return _regeneratorRuntime.async(function onNextDeliveryCardClick$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(user.role === GLOBALS.USER.ROLE.ORGANIZER)) {\n              _context.next = 4;\n              break;\n            }\n\n            navigation.navigate('OrdersManagement', {\n              delivery: delivery\n            });\n            _context.next = 8;\n            break;\n\n          case 4:\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(getUserOrder(user.id, delivery.id));\n\n          case 6:\n            order = _context.sent;\n\n            if (order != null && order.id != null && order.totalAmount > 0) {\n              navigation.navigate('ConsumerOrderPlacedScreen', {\n                user: user,\n                delivery: delivery\n              });\n            } else {\n              currentDate = new Date();\n\n              if (isAfter(currentDate, delivery.limitDate)) {\n                showAlert('Os pedidos para essa entrega já foram encerrados.');\n              } else {\n                if (order == null || order.id == null) {\n                  startOrder(delivery.extraProducts);\n                }\n\n                navigation.navigate('ConsumerOrderScreen', {\n                  user: user,\n                  delivery: delivery\n                });\n              }\n            }\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var onPastDeliveryCardClick = function onPastDeliveryCardClick(delivery) {\n    var order;\n    return _regeneratorRuntime.async(function onPastDeliveryCardClick$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(user.role === GLOBALS.USER.ROLE.ORGANIZER)) {\n              _context2.next = 4;\n              break;\n            }\n\n            navigation.navigate('OrdersManagement', {\n              delivery: delivery\n            });\n            _context2.next = 8;\n            break;\n\n          case 4:\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(getUserOrder(user.id, delivery.id));\n\n          case 6:\n            order = _context2.sent;\n\n            if (order != null && order.id != null && order.totalAmount > 0) {\n              navigation.navigate('ConsumerOrderPlacedScreen', {\n                user: user,\n                delivery: delivery\n              });\n            } else {\n              showAlert('Pedido não realizado para esta entrega.');\n            }\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var renderNextDelivery = function renderNextDelivery() {\n    return React.createElement(View, {\n      style: styles.deliveriesListHeader,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 7\n      }\n    }, React.createElement(Text, {\n      style: styles.text,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }\n    }, \"Pr\\xF3xima entrega\"), nextDelivery ? React.createElement(View, {\n      style: styles.nextDeliveryItem,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }\n    }, React.createElement(DeliveryCard, {\n      delivery: nextDelivery,\n      ordersDateText: \"Pedidos at\\xE9:\",\n      onPress: function onPress() {\n        return onNextDeliveryCardClick(nextDelivery);\n      },\n      showEditButton: user.role === GLOBALS.USER.ROLE.ORGANIZER,\n      onEditButtonPress: function onEditButtonPress() {\n        return editDelivery(nextDelivery);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 13\n      }\n    })) : renderButtonOrMessage(), lastDeliveries && lastDeliveries.length ? React.createElement(View, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }\n    }, React.createElement(Divider, {\n      style: styles.divider,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }\n    }), React.createElement(Text, {\n      style: styles.text,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 13\n      }\n    }, \"\\xDAltimas entregas\")) : null);\n  };\n\n  var renderLastDeliveriesItem = function renderLastDeliveriesItem(_ref2) {\n    var item = _ref2.item;\n    return React.createElement(View, {\n      style: styles.lastDeliveriesItem,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 7\n      }\n    }, React.createElement(DeliveryCard, {\n      delivery: item,\n      ordersDateText: \"Pedidos encerrados em:\",\n      borderColor: \"darkorange\",\n      onPress: function onPress() {\n        return onPastDeliveryCardClick(item);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  return React.createElement(View, {\n    style: styles.screen,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }\n  }, !loading && !orderLoading && user ? React.createElement(FlatList, {\n    data: lastDeliveries,\n    ListHeaderComponent: renderNextDelivery,\n    renderItem: renderLastDeliveriesItem,\n    keyExtractor: function keyExtractor(item) {\n      return item.id;\n    },\n    onRefresh: function onRefresh() {\n      setRefreshing(true);\n      fetchDeliveries();\n      setRefreshing(false);\n    },\n    refreshing: refreshing,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 11\n    }\n  }) : React.createElement(Spinner, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport var deliveriesNavigationOptions = function deliveriesNavigationOptions(navigation) {\n  return {\n    headerTitle: function headerTitle() {\n      return React.createElement(View, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 7\n        }\n      }, React.createElement(View, {\n        style: styles.imageContainer,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 9\n        }\n      }, React.createElement(Image, {\n        style: styles.image,\n        source: BasketProductsImage,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }\n      })), React.createElement(MainHeader, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 9\n        }\n      }));\n    },\n    headerRight: function headerRight() {\n      return React.createElement(ConsumerGroupDetails, {\n        navigation: navigation.navigation,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 7\n        }\n      });\n    },\n    headerStyle: {\n      backgroundColor: 'transparent',\n      elevation: 0,\n      shadowOpacity: 0,\n      borderBottomWidth: 0\n    }\n  };\n};\nvar styles = StyleSheet.create({\n  screen: screen,\n  container: {\n    flex: 1,\n    margin: 5\n  },\n  deliveriesListHeader: {\n    flex: 1,\n    padding: 10,\n    marginTop: 10\n  },\n  lastDeliveriesItem: {\n    paddingHorizontal: 10,\n    marginBottom: 10\n  },\n  text: {\n    fontFamily: 'Roboto',\n    fontWeight: '700',\n    fontSize: 16,\n    color: '#505050'\n  },\n  nextDeliveryItem: {\n    marginTop: 10,\n    marginBottom: 10\n  },\n  nextDeliveryButton: {\n    marginTop: 20,\n    marginBottom: 10\n  },\n  divider: {\n    height: 1,\n    marginVertical: 20,\n    marginHorizontal: -10\n  },\n  imageContainer: {\n    position: 'absolute',\n    left: -15,\n    width: 80,\n    height: 65\n  },\n  image: {\n    width: '100%',\n    height: '100%'\n  },\n  buttonContainer: {\n    width: '100%'\n  },\n  button: {\n    marginTop: 5,\n    backgroundColor: Colors.secondary,\n    alignSelf: 'center'\n  }\n});\nexport default DeliveriesScreen;","map":{"version":3,"sources":["/home/bordi/projects/cestas-cooperflora-rn/src/screens/delivery/DeliveriesScreen.js"],"names":["React","useContext","useState","Divider","useFocusEffect","isAfter","Spinner","ConsumerGroupDetails","MainHeader","Button","Context","DeliveryContext","OrderContext","useUser","DeliveryCard","GLOBALS","BasketProductsImage","Colors","stardardScreenStyle","screen","showAlert","DeliveriesScreen","navigation","refreshing","setRefreshing","user","state","nextDelivery","lastDeliveries","loading","fetchDeliveries","orderLoading","getUserOrder","startOrder","useCallback","renderButtonOrMessage","role","USER","ROLE","ORGANIZER","styles","buttonContainer","button","navigate","nextDeliveryButton","editDelivery","delivery","params","onNextDeliveryCardClick","id","order","totalAmount","currentDate","Date","limitDate","extraProducts","onPastDeliveryCardClick","renderNextDelivery","deliveriesListHeader","text","nextDeliveryItem","length","divider","renderLastDeliveriesItem","item","lastDeliveriesItem","container","deliveriesNavigationOptions","headerTitle","imageContainer","image","headerRight","headerStyle","backgroundColor","elevation","shadowOpacity","borderBottomWidth","StyleSheet","create","flex","margin","padding","marginTop","paddingHorizontal","marginBottom","fontFamily","fontWeight","fontSize","color","height","marginVertical","marginHorizontal","position","left","width","secondary","alignSelf"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react';\nimport { FlatList, Image, StyleSheet, Text, View } from 'react-native';\nimport { Divider } from 'react-native-elements';\nimport { useFocusEffect } from '@react-navigation/native';\nimport { isAfter } from 'date-fns';\nimport Spinner from '../../components/Spinner';\nimport ConsumerGroupDetails from '../../components/ConsumerGroupDetails';\nimport MainHeader from '../../components/MainHeader';\nimport Button from '../../components/Button';\nimport { Context as DeliveryContext } from '../../context/DeliveryContext';\nimport { Context as OrderContext } from '../../context/OrderContext';\nimport useUser from '../../hooks/useUser';\nimport DeliveryCard from '../../components/DeliveryCard';\nimport GLOBALS from '../../Globals';\nimport BasketProductsImage from '../../../assets/images/basketproducts.png';\nimport Colors from '../../constants/Colors';\nimport { stardardScreenStyle as screen } from '../screenstyles/ScreenStyles';\nimport { showAlert } from '../../helper/HelperFunctions';\n\nconst DeliveriesScreen = ({ navigation }) => {\n  const [refreshing, setRefreshing] = useState(false);\n  const user = useUser();\n  const {\n    state: { nextDelivery, lastDeliveries, loading },\n    fetchDeliveries,\n  } = useContext(DeliveryContext);\n  const {\n    state: { loading: orderLoading },\n    getUserOrder,\n    startOrder,\n  } = useContext(OrderContext);\n\n  useFocusEffect(\n    React.useCallback(() => {\n      fetchDeliveries();\n    }, [])\n  );\n\n  const renderButtonOrMessage = () => {\n    if (user && user.role === GLOBALS.USER.ROLE.ORGANIZER) {\n      return (\n        <View style={styles.buttonContainer}>\n          <Button\n            id=\"addNextDeliveryButton\"\n            style={styles.button}\n            textColor=\"white\"\n            onPress={() =>\n              navigation.navigate('DeliveryManagement', {\n                screen: 'CreateDeliveryScreen',\n              })\n            }\n          >\n            Adicionar próxima entrega\n          </Button>\n        </View>\n      );\n    }\n    return (\n      <Text style={styles.nextDeliveryButton}>\n        A próxima entrega ainda não foi agendada.\n      </Text>\n    );\n  };\n\n  const editDelivery = (delivery) => {\n    navigation.navigate('DeliveryManagement', {\n      params: { delivery },\n      screen: 'CreateDeliveryScreen',\n    });\n  };\n\n  const onNextDeliveryCardClick = async (delivery) => {\n    if (user.role === GLOBALS.USER.ROLE.ORGANIZER) {\n      navigation.navigate('OrdersManagement', { delivery });\n    } else {\n      const order = await getUserOrder(user.id, delivery.id);\n\n      if (order != null && order.id != null && order.totalAmount > 0) {\n        navigation.navigate('ConsumerOrderPlacedScreen', { user, delivery });\n      } else {\n        const currentDate = new Date();\n\n        if (isAfter(currentDate, delivery.limitDate)) {\n          showAlert('Os pedidos para essa entrega já foram encerrados.');\n        } else {\n          if (order == null || order.id == null) {\n            startOrder(delivery.extraProducts);\n          }\n          navigation.navigate('ConsumerOrderScreen', { user, delivery });\n        }\n      }\n    }\n  };\n\n  const onPastDeliveryCardClick = async (delivery) => {\n    if (user.role === GLOBALS.USER.ROLE.ORGANIZER) {\n      navigation.navigate('OrdersManagement', { delivery });\n    } else {\n      const order = await getUserOrder(user.id, delivery.id);\n\n      if (order != null && order.id != null && order.totalAmount > 0) {\n        navigation.navigate('ConsumerOrderPlacedScreen', { user, delivery });\n      } else {\n        showAlert('Pedido não realizado para esta entrega.');\n      }\n    }\n  };\n\n  const renderNextDelivery = () => {\n    return (\n      <View style={styles.deliveriesListHeader}>\n        <Text style={styles.text}>Próxima entrega</Text>\n        {nextDelivery ? (\n          <View style={styles.nextDeliveryItem}>\n            <DeliveryCard\n              delivery={nextDelivery}\n              ordersDateText=\"Pedidos até:\"\n              onPress={() => onNextDeliveryCardClick(nextDelivery)}\n              showEditButton={user.role === GLOBALS.USER.ROLE.ORGANIZER}\n              onEditButtonPress={() => editDelivery(nextDelivery)}\n            />\n          </View>\n        ) : (\n          renderButtonOrMessage()\n        )}\n        {lastDeliveries && lastDeliveries.length ? (\n          <View>\n            <Divider style={styles.divider} />\n            <Text style={styles.text}>Últimas entregas</Text>\n          </View>\n        ) : null}\n      </View>\n    );\n  };\n\n  const renderLastDeliveriesItem = ({ item }) => {\n    return (\n      <View style={styles.lastDeliveriesItem}>\n        <DeliveryCard\n          delivery={item}\n          ordersDateText=\"Pedidos encerrados em:\"\n          borderColor=\"darkorange\"\n          onPress={() => onPastDeliveryCardClick(item)}\n        />\n      </View>\n    );\n  };\n\n  return (\n    <View style={styles.screen}>\n      <View style={styles.container}>\n        {!loading && !orderLoading && user ? (\n          <FlatList\n            data={lastDeliveries}\n            ListHeaderComponent={renderNextDelivery}\n            renderItem={renderLastDeliveriesItem}\n            keyExtractor={(item) => item.id}\n            onRefresh={() => {\n              setRefreshing(true);\n              fetchDeliveries();\n              setRefreshing(false);\n            }}\n            refreshing={refreshing}\n          />\n        ) : (\n          <Spinner />\n        )}\n      </View>\n    </View>\n  );\n};\n\nexport const deliveriesNavigationOptions = (navigation) => {\n  return {\n    headerTitle: () => (\n      <View>\n        <View style={styles.imageContainer}>\n          <Image style={styles.image} source={BasketProductsImage} />\n        </View>\n        <MainHeader />\n      </View>\n    ),\n    headerRight: () => (\n      <ConsumerGroupDetails navigation={navigation.navigation} />\n    ),\n    headerStyle: {\n      backgroundColor: 'transparent',\n      elevation: 0,\n      shadowOpacity: 0,\n      borderBottomWidth: 0,\n    },\n  };\n};\n\nconst styles = StyleSheet.create({\n  screen,\n  container: {\n    flex: 1,\n    margin: 5,\n  },\n  deliveriesListHeader: {\n    flex: 1,\n    padding: 10,\n    marginTop: 10,\n  },\n  lastDeliveriesItem: {\n    paddingHorizontal: 10,\n    marginBottom: 10,\n  },\n  text: {\n    fontFamily: 'Roboto',\n    fontWeight: '700',\n    fontSize: 16,\n    color: '#505050',\n  },\n  nextDeliveryItem: {\n    marginTop: 10,\n    marginBottom: 10,\n  },\n  nextDeliveryButton: {\n    marginTop: 20,\n    marginBottom: 10,\n  },\n  divider: {\n    height: 1,\n    marginVertical: 20,\n    marginHorizontal: -10,\n  },\n  imageContainer: {\n    position: 'absolute',\n    left: -15,\n    width: 80,\n    height: 65,\n  },\n  image: {\n    width: '100%',\n    height: '100%',\n  },\n  buttonContainer: {\n    // position: 'absolute',\n    width: '100%',\n    // bottom: 0,\n  },\n  button: {\n    marginTop: 5,\n    backgroundColor: Colors.secondary,\n    alignSelf: 'center',\n  },\n});\n\nexport default DeliveriesScreen;\n"]},"metadata":{},"sourceType":"module"}