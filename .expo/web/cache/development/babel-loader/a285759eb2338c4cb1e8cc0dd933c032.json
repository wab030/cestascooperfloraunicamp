{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport createDataContext from \"./createDataContext\";\nimport { getFirst, updateDoc } from \"../api/firebase\";\nimport GLOBALS from \"../Globals\";\n\nvar consumerGroupReducer = function consumerGroupReducer(state, action) {\n  switch (action.type) {\n    case 'fetch_group':\n      return {\n        loading: false,\n        consumerGroup: action.payload\n      };\n\n    case 'update_group':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: false\n      });\n\n    case 'loading':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: true\n      });\n\n    default:\n      return state;\n  }\n};\n\nvar getConsumerGroupName = function getConsumerGroupName(dispatch) {\n  return function _callee() {\n    var group;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log('Getting consumer group name...');\n            dispatch({\n              type: 'loading'\n            });\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(getFirst(GLOBALS.COLLECTION.GROUPS));\n\n          case 4:\n            group = _context.sent;\n            dispatch({\n              type: 'fetch_group',\n              payload: null\n            });\n            return _context.abrupt(\"return\", group.name);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nvar fetchConsumerGroup = function fetchConsumerGroup(dispatch) {\n  return function _callee2() {\n    var group;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            console.log('Fetching consumer group...');\n            dispatch({\n              type: 'loading'\n            });\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(getFirst(GLOBALS.COLLECTION.GROUPS));\n\n          case 4:\n            group = _context2.sent;\n            dispatch({\n              type: 'fetch_group',\n              payload: group\n            });\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nvar updateConsumerGroup = function updateConsumerGroup(dispatch) {\n  return function _callee3(consumerGroup) {\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            dispatch({\n              type: 'loading'\n            });\n            console.log('Updating group: ' + consumerGroup.id);\n            updateDoc(GLOBALS.COLLECTION.GROUPS, consumerGroup.id, consumerGroup).then(function () {\n              dispatch({\n                type: 'update_group'\n              });\n            });\n\n          case 3:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nvar _createDataContext = createDataContext(consumerGroupReducer, {\n  getConsumerGroupName: getConsumerGroupName,\n  fetchConsumerGroup: fetchConsumerGroup,\n  updateConsumerGroup: updateConsumerGroup\n}, {\n  consumerGroup: null,\n  loading: false\n}),\n    Provider = _createDataContext.Provider,\n    Context = _createDataContext.Context;\n\nexport { Provider, Context };","map":{"version":3,"sources":["/home/bordi/projects/cestas-cooperflora-rn/src/context/ConsumerGroupContext.js"],"names":["createDataContext","getFirst","updateDoc","GLOBALS","consumerGroupReducer","state","action","type","loading","consumerGroup","payload","getConsumerGroupName","dispatch","console","log","COLLECTION","GROUPS","group","name","fetchConsumerGroup","updateConsumerGroup","id","then","Provider","Context"],"mappings":"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","sourcesContent":["import createDataContext from './createDataContext';\nimport { getFirst, updateDoc } from '../api/firebase';\nimport GLOBALS from '../Globals';\n\nconst consumerGroupReducer = (state, action) => {\n  switch (action.type) {\n    case 'fetch_group':\n      return { loading: false, consumerGroup: action.payload };\n    case 'update_group':\n      return { ...state, loading: false };\n    case 'loading':\n      return { ...state, loading: true };\n    default:\n      return state;\n  }\n};\n\nconst getConsumerGroupName = (dispatch) => async () => {\n  console.log('Getting consumer group name...');\n  dispatch({ type: 'loading' });\n\n  const group = await getFirst(GLOBALS.COLLECTION.GROUPS);\n\n  dispatch({ type: 'fetch_group', payload: null });\n  return group.name;\n};\n\nconst fetchConsumerGroup = (dispatch) => async () => {\n  console.log('Fetching consumer group...');\n  dispatch({ type: 'loading' });\n\n  const group = await getFirst(GLOBALS.COLLECTION.GROUPS);\n\n  dispatch({ type: 'fetch_group', payload: group });\n};\n\nconst updateConsumerGroup = (dispatch) => async (consumerGroup) => {\n  dispatch({ type: 'loading' });\n\n  console.log('Updating group: ' + consumerGroup.id);\n\n  updateDoc(GLOBALS.COLLECTION.GROUPS, consumerGroup.id, consumerGroup).then(\n    () => {\n      dispatch({ type: 'update_group' });\n    }\n  );\n};\n\nexport const { Provider, Context } = createDataContext(\n  consumerGroupReducer,\n  {\n    getConsumerGroupName,\n    fetchConsumerGroup,\n    updateConsumerGroup,\n  },\n  { consumerGroup: null, loading: false }\n);\n"]},"metadata":{},"sourceType":"module"}