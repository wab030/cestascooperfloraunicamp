{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/bordi/projects/cestas-cooperflora-rn/src/screens/UpdateAccountInfoScreen.js\";\n\nimport React, { useContext, useState } from 'react';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Dialog } from 'react-native-simple-dialogs';\nimport Spacer from \"../components/Spacer\";\nimport FormInput from \"../components/FormInput\";\nimport Button from \"../components/Button\";\nimport Divider from \"../components/Divider\";\nimport { Context as UserContext } from \"../context/UserContext\";\nimport { Context as AuthContext } from \"../context/AuthContext\";\nimport Spinner from \"../components/Spinner\";\nimport TextLink from \"../components/TextLink\";\nimport HeaderTitle from \"../components/HeaderTitle\";\nimport BackArrow from \"../components/BackArrow\";\nimport Colors from \"../constants/Colors\";\n\nvar UpdateAccountInfoScreen = function UpdateAccountInfoScreen(_ref) {\n  var navigation = _ref.navigation,\n      route = _ref.route;\n  var user = route.params.user;\n\n  var _useState = useState(user ? user.name : ''),\n      _useState2 = _slicedToArray(_useState, 2),\n      name = _useState2[0],\n      setName = _useState2[1];\n\n  var _useState3 = useState(user ? user.email : ''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      email = _useState4[0],\n      setEmail = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      password = _useState6[0],\n      setPassword = _useState6[1];\n\n  var _useState7 = useState(user.phoneNumber ? user.phoneNumber : ''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      phoneNumber = _useState8[0],\n      setPhoneNumber = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      dialogVisible = _useState10[0],\n      setDialogVisible = _useState10[1];\n\n  var _useContext = useContext(UserContext),\n      loading = _useContext.state.loading,\n      findUserByEmail = _useContext.findUserByEmail;\n\n  var _useContext2 = useContext(AuthContext),\n      state = _useContext2.state,\n      updateAccount = _useContext2.updateAccount,\n      clearError = _useContext2.clearError;\n\n  var emailTextInput = React.createRef();\n  var phoneNumberTextInput = React.createRef();\n\n  var isInvalidEmail = function isInvalidEmail() {\n    var reg = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n    return email.length < 3 || !reg.test(email);\n  };\n\n  var isInvalidName = function isInvalidName() {\n    return name.length < 1;\n  };\n\n  var alertExistingEmail = function alertExistingEmail(email) {\n    Alert.alert('Aviso', \"J\\xE1 existe uma pessoa cadastrada com e-mail \" + email, [{\n      text: 'OK'\n    }]);\n  };\n\n  var updateUserInfo = function updateUserInfo() {\n    if (user.name === name && user.email === email && user.phoneNumber === phoneNumber) {\n      console.log('Não foram identificadas alterações nos dados!');\n      Alert.alert('Não foram identificadas alterações nos dados!', ' ', [{\n        text: 'Permanecer na mesma tela'\n      }, {\n        text: 'Voltar',\n        onPress: function onPress() {\n          return navigation.navigate('AccountOptionsScreen');\n        }\n      }]);\n      return;\n    }\n\n    if (isInvalidEmail() || isInvalidName()) {\n      Alert.alert('Foram identificados erros no preenchimento dos dados!', 'Por favor corrija antes de continuar ', [{\n        text: 'OK'\n      }]);\n      return;\n    }\n\n    if (user) {\n      findUserByEmail(email).then(function (existingUser) {\n        if (existingUser && existingUser.id !== user.id) {\n          alertExistingEmail(email);\n        } else if (email !== user.email) {\n          setDialogVisible(true);\n        } else {\n          updateAccount(user.email, password, {\n            id: user.id,\n            balance: user.balance,\n            name: name,\n            email: email,\n            phoneNumber: phoneNumber\n          }).then(function () {\n            setDialogVisible(false);\n            navigation.navigate('AccountOptionsScreen');\n          });\n        }\n      });\n    }\n  };\n\n  var renderPasswordDialog = function renderPasswordDialog() {\n    return React.createElement(Dialog, {\n      visible: dialogVisible,\n      title: \"Digite sua senha\",\n      onTouchOutside: function onTouchOutside() {\n        return setDialogVisible(false);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 7\n      }\n    }, React.createElement(View, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }\n    }, React.createElement(Text, {\n      style: styles.dialogText,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }\n    }, \"Para alterar o e-mail, \\xE9 necess\\xE1rio informar sua senha:\"), React.createElement(FormInput, {\n      id: \"password\",\n      placeholder: \"Senha\",\n      value: password,\n      onChangeText: function onChangeText(password) {\n        clearError();\n        setPassword(password);\n      },\n      returnKeyType: \"done\",\n      autoCapitalize: \"none\",\n      autoCorrect: false,\n      secureTextEntry: true,\n      fontSize: 14,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }\n    }), state.errorMessage ? React.createElement(Text, {\n      style: styles.errorMessage,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 13\n      }\n    }, state.errorMessage) : null, state.loading ? null : React.createElement(View, {\n      style: styles.dialogButtonsContainer,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 13\n      }\n    }, React.createElement(TextLink, {\n      textStyle: styles.dialogCancelButton,\n      text: \"Cancelar\",\n      onPress: function onPress() {\n        return setDialogVisible(false);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 15\n      }\n    }), React.createElement(TextLink, {\n      text: \"OK\",\n      onPress: function onPress() {\n        updateAccount(user.email, password, {\n          id: user.id,\n          balance: user.balance,\n          name: name,\n          email: email,\n          phoneNumber: phoneNumber\n        }).then(function () {\n          setDialogVisible(false);\n          navigation.navigate('AccountOptionsScreen');\n        });\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 15\n      }\n    }))));\n  };\n\n  return React.createElement(View, {\n    style: styles.screen,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 5\n    }\n  }, React.createElement(ScrollView, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }\n  }, state.loading || loading ? React.createElement(Spinner, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 11\n    }\n  }) : React.createElement(TouchableWithoutFeedback, {\n    onPress: Keyboard.dismiss,\n    accessible: false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 11\n    }\n  }, React.createElement(KeyboardAvoidingView, {\n    style: {\n      flex: 1,\n      flexDirection: 'column',\n      justifyContent: 'center'\n    },\n    behavior: Platform.OS === 'ios' ? 'padding' : null,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 13\n    }\n  }, React.createElement(View, {\n    style: styles.formContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 15\n    }\n  }, React.createElement(FormInput, {\n    id: \"name\",\n    label: \"Nome\",\n    value: name,\n    returnKeyType: \"next\",\n    onChangeText: setName,\n    onSubmitEditing: function onSubmitEditing() {\n      return emailTextInput.current.focus();\n    },\n    autoCapitalize: \"words\",\n    autoCorrect: false,\n    maxLength: 50,\n    hasError: isInvalidName(),\n    errorMessage: \"Por favor preencha o campo nome.\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 17\n    }\n  }), React.createElement(FormInput, {\n    id: \"e-mail\",\n    label: \"E-mail\",\n    value: email,\n    reference: emailTextInput,\n    returnKeyType: \"next\",\n    onChangeText: setEmail,\n    onSubmitEditing: function onSubmitEditing() {\n      return phoneNumberTextInput.current.focus();\n    },\n    autoCapitalize: \"none\",\n    autoCorrect: false,\n    maxLength: 50,\n    hasError: isInvalidEmail(),\n    errorMessage: \"Endere\\xE7o de e-mail inv\\xE1lido.\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 17\n    }\n  }), React.createElement(FormInput, {\n    id: \"mobile\",\n    label: \"Celular\",\n    value: phoneNumber,\n    returnKeyType: \"done\",\n    reference: phoneNumberTextInput,\n    maxLength: 18,\n    onChangeText: setPhoneNumber,\n    keyboardType: \"phone-pad\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 17\n    }\n  }), React.createElement(Spacer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 17\n    }\n  }), React.createElement(Spacer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 17\n    }\n  }), renderPasswordDialog()), React.createElement(View, {\n    style: styles.buttonContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 15\n    }\n  }, React.createElement(Divider, {\n    style: {\n      borderBottomColor: Colors.secondary\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 17\n    }\n  }), React.createElement(Button, {\n    id: \"updateUserInfoButton\",\n    style: styles.confirmButton,\n    textColor: \"white\",\n    onPress: updateUserInfo,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 17\n    }\n  }, \"Atualizar informa\\xE7\\xF5es\"))))));\n};\n\nexport var updateAccountInfoScreenOptions = function updateAccountInfoScreenOptions() {\n  return {\n    headerTitle: function headerTitle() {\n      return React.createElement(View, {\n        style: styles.header,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 7\n        }\n      }, React.createElement(HeaderTitle, {\n        title: \"Meus Dados\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 9\n        }\n      }));\n    },\n    headerBackImage: function headerBackImage() {\n      return React.createElement(BackArrow, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 28\n        }\n      });\n    },\n    headerStyle: {\n      backgroundColor: 'transparent',\n      elevation: 0,\n      shadowOpacity: 0,\n      borderBottomWidth: 0\n    }\n  };\n};\nvar styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    marginTop: 4,\n    backgroundColor: 'white',\n    borderTopLeftRadius: 20,\n    borderTopRightRadius: 20,\n    shadowColor: 'black',\n    shadowOpacity: 0.26,\n    shadowOffset: {\n      width: 4,\n      height: -3\n    },\n    shadowRadius: 8,\n    elevation: 25\n  },\n  container: {\n    flex: 1,\n    margin: 25\n  },\n  dialogText: {\n    marginBottom: 7\n  },\n  dialogButtonsContainer: {\n    marginTop: 10,\n    flexDirection: 'row',\n    justifyContent: 'space-around'\n  },\n  dialogCancelButton: {\n    fontWeight: 'bold'\n  },\n  errorMessage: {\n    fontSize: 14,\n    color: 'red',\n    marginBottom: 10,\n    marginLeft: 10,\n    marginTop: -8\n  },\n  buttonContainer: {\n    position: 'absolute',\n    width: '100%',\n    bottom: 0\n  },\n  confirmButton: {\n    marginTop: 5,\n    backgroundColor: Colors.primary,\n    justifyContent: 'space-between',\n    alignSelf: 'center'\n  },\n  header: {\n    alignItems: 'flex-start'\n  }\n});\nexport default UpdateAccountInfoScreen;","map":{"version":3,"sources":["/home/bordi/projects/cestas-cooperflora-rn/src/screens/UpdateAccountInfoScreen.js"],"names":["React","useContext","useState","Dialog","Spacer","FormInput","Button","Divider","Context","UserContext","AuthContext","Spinner","TextLink","HeaderTitle","BackArrow","Colors","UpdateAccountInfoScreen","navigation","route","user","params","name","setName","email","setEmail","password","setPassword","phoneNumber","setPhoneNumber","dialogVisible","setDialogVisible","loading","state","findUserByEmail","updateAccount","clearError","emailTextInput","createRef","phoneNumberTextInput","isInvalidEmail","reg","length","test","isInvalidName","alertExistingEmail","Alert","alert","text","updateUserInfo","console","log","onPress","navigate","then","existingUser","id","balance","renderPasswordDialog","styles","dialogText","errorMessage","dialogButtonsContainer","dialogCancelButton","screen","container","Keyboard","dismiss","flex","flexDirection","justifyContent","Platform","OS","formContainer","current","focus","buttonContainer","borderBottomColor","secondary","confirmButton","updateAccountInfoScreenOptions","headerTitle","header","headerBackImage","headerStyle","backgroundColor","elevation","shadowOpacity","borderBottomWidth","StyleSheet","create","marginTop","borderTopLeftRadius","borderTopRightRadius","shadowColor","shadowOffset","width","height","shadowRadius","margin","marginBottom","fontWeight","fontSize","color","marginLeft","position","bottom","primary","alignSelf","alignItems"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react';\nimport {\n  Alert,\n  Keyboard,\n  KeyboardAvoidingView,\n  Platform,\n  ScrollView,\n  StyleSheet,\n  Text,\n  TouchableWithoutFeedback,\n  View,\n} from 'react-native';\nimport { Dialog } from 'react-native-simple-dialogs';\nimport Spacer from '../components/Spacer';\nimport FormInput from '../components/FormInput';\nimport Button from '../components/Button';\nimport Divider from '../components/Divider';\nimport { Context as UserContext } from '../context/UserContext';\nimport { Context as AuthContext } from '../context/AuthContext';\nimport Spinner from '../components/Spinner';\nimport TextLink from '../components/TextLink';\nimport HeaderTitle from '../components/HeaderTitle';\nimport BackArrow from '../components/BackArrow';\nimport Colors from '../constants/Colors';\n\nconst UpdateAccountInfoScreen = ({ navigation, route }) => {\n  const { user } = route.params;\n  const [name, setName] = useState(user ? user.name : '');\n  const [email, setEmail] = useState(user ? user.email : '');\n  const [password, setPassword] = useState('');\n  const [phoneNumber, setPhoneNumber] = useState(\n    user.phoneNumber ? user.phoneNumber : ''\n  );\n  const [dialogVisible, setDialogVisible] = useState(false);\n  const {\n    state: { loading },\n    findUserByEmail,\n  } = useContext(UserContext);\n  const { state, updateAccount, clearError } = useContext(AuthContext);\n\n  const emailTextInput = React.createRef();\n  const phoneNumberTextInput = React.createRef();\n\n  const isInvalidEmail = () => {\n    const reg = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n    return email.length < 3 || !reg.test(email);\n  };\n\n  const isInvalidName = () => {\n    return name.length < 1;\n  };\n\n  const alertExistingEmail = (email) => {\n    Alert.alert(\n      'Aviso',\n      `Já existe uma pessoa cadastrada com e-mail ${email}`,\n      [\n        {\n          text: 'OK',\n        },\n      ]\n    );\n  };\n\n  const updateUserInfo = () => {\n    if (\n      user.name === name &&\n      user.email === email &&\n      user.phoneNumber === phoneNumber\n    ) {\n      console.log('Não foram identificadas alterações nos dados!');\n      Alert.alert('Não foram identificadas alterações nos dados!', ' ', [\n        {\n          text: 'Permanecer na mesma tela',\n        },\n        {\n          text: 'Voltar',\n          onPress: () => navigation.navigate('AccountOptionsScreen'),\n        },\n      ]);\n      return;\n    }\n\n    if (isInvalidEmail() || isInvalidName()) {\n      Alert.alert(\n        'Foram identificados erros no preenchimento dos dados!',\n        'Por favor corrija antes de continuar ',\n        [\n          {\n            text: 'OK',\n          },\n        ]\n      );\n      return;\n    }\n\n    if (user) {\n      findUserByEmail(email).then((existingUser) => {\n        if (existingUser && existingUser.id !== user.id) {\n          alertExistingEmail(email);\n        } else if (email !== user.email) {\n          setDialogVisible(true);\n        } else {\n          updateAccount(user.email, password, {\n            id: user.id,\n            balance: user.balance,\n            name,\n            email,\n            phoneNumber,\n          }).then(() => {\n            setDialogVisible(false);\n            navigation.navigate('AccountOptionsScreen');\n          });\n        }\n      });\n    }\n  };\n\n  const renderPasswordDialog = () => {\n    return (\n      <Dialog\n        visible={dialogVisible}\n        title=\"Digite sua senha\"\n        onTouchOutside={() => setDialogVisible(false)}\n      >\n        <View>\n          <Text style={styles.dialogText}>\n            Para alterar o e-mail, é necessário informar sua senha:\n          </Text>\n          <FormInput\n            id=\"password\"\n            placeholder=\"Senha\"\n            value={password}\n            onChangeText={(password) => {\n              clearError();\n              setPassword(password);\n            }}\n            returnKeyType=\"done\"\n            autoCapitalize=\"none\"\n            autoCorrect={false}\n            secureTextEntry\n            fontSize={14}\n          />\n          {state.errorMessage ? (\n            <Text style={styles.errorMessage}>{state.errorMessage}</Text>\n          ) : null}\n          {state.loading ? null : (\n            <View style={styles.dialogButtonsContainer}>\n              <TextLink\n                textStyle={styles.dialogCancelButton}\n                text=\"Cancelar\"\n                onPress={() => setDialogVisible(false)}\n              />\n              <TextLink\n                text=\"OK\"\n                onPress={() => {\n                  updateAccount(user.email, password, {\n                    id: user.id,\n                    balance: user.balance,\n                    name,\n                    email,\n                    phoneNumber,\n                  }).then(() => {\n                    setDialogVisible(false);\n                    navigation.navigate('AccountOptionsScreen');\n                  });\n                }}\n              />\n            </View>\n          )}\n        </View>\n      </Dialog>\n    );\n  };\n\n  return (\n    <View style={styles.screen}>\n      <ScrollView style={styles.container}>\n        {state.loading || loading ? (\n          <Spinner />\n        ) : (\n          <TouchableWithoutFeedback\n            onPress={Keyboard.dismiss}\n            accessible={false}\n          >\n            <KeyboardAvoidingView\n              style={{\n                flex: 1,\n                flexDirection: 'column',\n                justifyContent: 'center',\n              }}\n              behavior={Platform.OS === 'ios' ? 'padding' : null}\n              // enabled\n              // keyboardVerticalOffset={100}\n            >\n              <View style={styles.formContainer}>\n                <FormInput\n                  id=\"name\"\n                  label=\"Nome\"\n                  value={name}\n                  returnKeyType=\"next\"\n                  onChangeText={setName}\n                  onSubmitEditing={() => emailTextInput.current.focus()}\n                  autoCapitalize=\"words\"\n                  autoCorrect={false}\n                  maxLength={50}\n                  hasError={isInvalidName()}\n                  errorMessage=\"Por favor preencha o campo nome.\"\n                />\n                <FormInput\n                  id=\"e-mail\"\n                  label=\"E-mail\"\n                  value={email}\n                  reference={emailTextInput}\n                  returnKeyType=\"next\"\n                  onChangeText={setEmail}\n                  onSubmitEditing={() => phoneNumberTextInput.current.focus()}\n                  autoCapitalize=\"none\"\n                  autoCorrect={false}\n                  maxLength={50}\n                  hasError={isInvalidEmail()}\n                  errorMessage=\"Endereço de e-mail inválido.\"\n                />\n                <FormInput\n                  id=\"mobile\"\n                  label=\"Celular\"\n                  value={phoneNumber}\n                  returnKeyType=\"done\"\n                  reference={phoneNumberTextInput}\n                  maxLength={18}\n                  onChangeText={setPhoneNumber}\n                  keyboardType=\"phone-pad\"\n                />\n                <Spacer />\n                <Spacer />\n                {renderPasswordDialog()}\n              </View>\n              <View style={styles.buttonContainer}>\n                <Divider style={{ borderBottomColor: Colors.secondary }} />\n                <Button\n                  id=\"updateUserInfoButton\"\n                  style={styles.confirmButton}\n                  textColor=\"white\"\n                  onPress={updateUserInfo}\n                >\n                  Atualizar informações\n                </Button>\n              </View>\n            </KeyboardAvoidingView>\n          </TouchableWithoutFeedback>\n        )}\n      </ScrollView>\n    </View>\n  );\n};\n\nexport const updateAccountInfoScreenOptions = () => {\n  return {\n    headerTitle: () => (\n      <View style={styles.header}>\n        <HeaderTitle title=\"Meus Dados\" />\n      </View>\n    ),\n    headerBackImage: () => <BackArrow />,\n    headerStyle: {\n      backgroundColor: 'transparent',\n      elevation: 0,\n      shadowOpacity: 0,\n      borderBottomWidth: 0,\n    },\n  };\n};\n\nconst styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    marginTop: 4,\n    backgroundColor: 'white',\n    borderTopLeftRadius: 20,\n    borderTopRightRadius: 20,\n    shadowColor: 'black',\n    shadowOpacity: 0.26,\n    shadowOffset: { width: 4, height: -3 },\n    shadowRadius: 8,\n    elevation: 25,\n  },\n  container: {\n    flex: 1,\n    margin: 25,\n  },\n  dialogText: {\n    marginBottom: 7,\n  },\n  dialogButtonsContainer: {\n    marginTop: 10,\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n  },\n  dialogCancelButton: {\n    fontWeight: 'bold',\n  },\n  errorMessage: {\n    fontSize: 14,\n    color: 'red',\n    marginBottom: 10,\n    marginLeft: 10,\n    marginTop: -8,\n  },\n  buttonContainer: {\n    position: 'absolute',\n    width: '100%',\n    bottom: 0,\n  },\n  confirmButton: {\n    marginTop: 5,\n    backgroundColor: Colors.primary,\n    justifyContent: 'space-between',\n    alignSelf: 'center',\n  },\n  header: {\n    alignItems: 'flex-start',\n  },\n});\n\nexport default UpdateAccountInfoScreen;\n"]},"metadata":{},"sourceType":"module"}