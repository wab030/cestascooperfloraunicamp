{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/bordi/projects/cestas-cooperflora-rn/src/screens/consumer/ConsumerPaymentsScreen.js\";\n\nimport React, { useEffect, useState, useContext } from 'react';\nimport { format } from 'date-fns';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { Entypo } from '@expo/vector-icons';\nimport HeaderTitle from \"../../components/HeaderTitle\";\nimport BackArrow from \"../../components/BackArrow\";\nimport Divider from \"../../components/Divider\";\nimport Colors from \"../../constants/Colors\";\nimport { Context as userContext } from \"../../context/UserContext\";\nimport GLOBALS from \"../../Globals\";\nimport { stardardScreenStyle as screen } from \"../screenstyles/ScreenStyles\";\nimport { TextContent, TextLabel, Number } from \"../../components/StandardStyles\";\nimport { accessibilityLabel } from \"../../utils\";\nimport { fetchPayments } from \"../../api/firebase\";\nimport RenderImageReceipt from \"../../components/RenderImageReceipt\";\nimport RenderPdfReceipt from \"../../components/RenderPdfReceipt\";\n\nvar ConsumerPaymentsScreen = function ConsumerPaymentsScreen(_ref) {\n  var route = _ref.route,\n      navigation = _ref.navigation;\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      userData = _useState4[0],\n      setUserData = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      userPayments = _useState6[0],\n      setUserPayments = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      paymentsOpened = _useState8[0],\n      setPaymentsOpened = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      refreshing = _useState10[0],\n      setRefreshing = _useState10[1];\n\n  var userId = route.params.userId;\n\n  var _useContext = useContext(userContext),\n      getUserById = _useContext.getUserById;\n\n  var handleFetchPayments = function handleFetchPayments() {\n    setPaymentsOpened(false);\n    setIsLoading(false);\n    fetchPayments(GLOBALS.COLLECTION.USERS, GLOBALS.SUB_COLLECTION.PAYMENTS, userId).then(function (data) {\n      var openedPayments = data.filter(function (payment) {\n        return payment.status === GLOBALS.PAYMENT.STATUS.OPENED;\n      });\n      openedPayments.length > 0 ? setPaymentsOpened(true) : null;\n      setUserPayments(data);\n      setIsLoading(false);\n    }).catch(function (error) {\n      console.log('Erro dentro do catch do Consumer Payments Screen', error);\n      Alert.alert('Erro ao carregar os seus pagamentos!', error);\n    });\n  };\n\n  useEffect(function () {\n    var unsubscribe = navigation.addListener('focus', function () {\n      setIsLoading(true);\n\n      if (userId) {\n        getUserById(userId).then(function (data) {\n          setUserData(data);\n          handleFetchPayments();\n          setIsLoading(false);\n        });\n      }\n    });\n    return unsubscribe;\n  }, [navigation, userId]);\n\n  var showImage = function showImage(index) {\n    var newUserPayments = _toConsumableArray(userPayments);\n\n    newUserPayments[index].showReceiptImage = !newUserPayments[index].showReceiptImage;\n    setUserPayments(newUserPayments);\n  };\n\n  var renderReceipt = function renderReceipt(userPayment) {\n    if (userPayment.showReceiptImage) {\n      if (userPayment.receipt.type === 'image/jpeg' || userPayment.receipt.type === 'image/png') {\n        console.log(userPayment.receipt.url);\n        return React.createElement(View, {\n          style: styles.imageContainer,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 11\n          }\n        }, React.createElement(RenderImageReceipt, {\n          imageUrl: userPayment.receipt.url,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 13\n          }\n        }));\n      }\n\n      if (userPayment.receipt.type === 'application/pdf') {\n        return React.createElement(RenderPdfReceipt, {\n          documentUrl: userPayment.receipt.url,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 16\n          }\n        });\n      }\n    }\n\n    return null;\n  };\n\n  var renderClosedPayments = function renderClosedPayments() {\n    return React.createElement(View, {\n      style: styles.closedPayments,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 7\n      }\n    }, React.createElement(TextLabel, {\n      style: {\n        alignSelf: 'center',\n        color: '#BB2525'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }\n    }, \"Pagamentos Conclu\\xEDdos\"), userPayments.map(function (userPayment, index) {\n      return React.createElement(View, {\n        key: userPayment.date,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }\n      }, userPayment.status === GLOBALS.PAYMENT.STATUS.COMPLETED ? React.createElement(View, {\n        key: userPayment.date,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 15\n        }\n      }, React.createElement(View, {\n        style: styles.paymentContainer,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 17\n        }\n      }, React.createElement(View, {\n        style: styles.dateContainer,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 19\n        }\n      }, React.createElement(TextLabel, {\n        style: styles.dateText,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }\n      }, format(userPayment.date, GLOBALS.FORMAT.DEFAULT_DATE_TIME)), React.createElement(TouchableOpacity, _extends({\n        style: styles.button,\n        onPress: function onPress() {\n          return showImage(index);\n        }\n      }, accessibilityLabel(\"showImageClosedPayment\" + index), {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }\n      }), React.createElement(View, {\n        style: styles.imageIcon,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 23\n        }\n      }, React.createElement(Entypo, {\n        name: \"attachment\",\n        size: 24,\n        color: Colors.primary,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 25\n        }\n      })))), React.createElement(View, {\n        style: styles.payLine,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 19\n        }\n      }, React.createElement(TextContent, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 21\n        }\n      }, \"Pagamento Realizado\"), React.createElement(Number, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 21\n        }\n      }, \"R$ \", userPayment.totalToBePaid.toFixed(2))), React.createElement(View, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 19\n        }\n      }, userPayment.paymentNote ? React.createElement(Text, {\n        style: styles.paymentNote,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 23\n        }\n      }, \"Obs: \", userPayment.paymentNote) : null)), renderReceipt(userPayment), React.createElement(Divider, {\n        style: {\n          borderBottomColor: Colors.tertiary\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 17\n        }\n      })) : null);\n    }));\n  };\n\n  var renderOpenedPayments = function renderOpenedPayments() {\n    return React.createElement(View, {\n      style: styles.openedPayments,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 7\n      }\n    }, !paymentsOpened ? React.createElement(TextLabel, {\n      style: {\n        alignSelf: 'center'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }\n    }, \"N\\xE3o existem pagamentos a serem feitos!\") : React.createElement(View, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 11\n      }\n    }, React.createElement(TextLabel, {\n      style: {\n        alignSelf: 'center',\n        color: '#BB2525'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 13\n      }\n    }, \"Pagamentos abertos.\"), React.createElement(TextLabel, {\n      style: {\n        alignSelf: 'center',\n        color: '#BB2525'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 13\n      }\n    }, \"Clique sobre o item para pagar.\"), userPayments.map(function (userPayment, index) {\n      return React.createElement(TouchableOpacity, _extends({\n        key: userPayment.date,\n        onPress: function onPress() {\n          navigation.navigate('ConsumerAddPaymentScreen', {\n            userPayment: userPayment\n          });\n        }\n      }, accessibilityLabel(\"showImageOpenedPayment\" + index), {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 17\n        }\n      }), userPayment.status === GLOBALS.PAYMENT.STATUS.OPENED ? React.createElement(View, {\n        key: userPayment.date,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 21\n        }\n      }, React.createElement(View, {\n        style: styles.paymentContainer,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 23\n        }\n      }, React.createElement(View, {\n        style: styles.dateContainer,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 25\n        }\n      }, React.createElement(TextLabel, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 27\n        }\n      }, format(userPayment.date, GLOBALS.FORMAT.DEFAULT_DATE_TIME))), React.createElement(View, {\n        style: styles.payLine,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 25\n        }\n      }, React.createElement(TextContent, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 27\n        }\n      }, \"Valor a ser pago\"), React.createElement(Number, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 27\n        }\n      }, \"R$ \", userPayment.totalToBePaid.toFixed(2)))), userPayment.showReceiptImage ? React.createElement(View, {\n        style: styles.imageContainer,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 25\n        }\n      }, React.createElement(Image, {\n        style: styles.image,\n        source: {\n          uri: userPayment.receiptImage\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 27\n        }\n      })) : null, React.createElement(Divider, {\n        style: {\n          borderBottomColor: Colors.tertiary\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 23\n        }\n      })) : null);\n    })));\n  };\n\n  if (isLoading) {\n    return React.createElement(View, {\n      style: styles.centered,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 7\n      }\n    }, React.createElement(ActivityIndicator, {\n      size: \"large\",\n      color: Colors.primary,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  return React.createElement(View, {\n    style: styles.screen,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }\n  }, React.createElement(ScrollView, {\n    refreshControl: React.createElement(RefreshControl, {\n      refreshing: refreshing,\n      onRefresh: function onRefresh() {\n        setRefreshing(true);\n        handleFetchPayments();\n        setRefreshing(false);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 13\n      }\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: styles.titleContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: styles.title,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 13\n    }\n  }, \"Saldo: \", userData.balance.toFixed(2), ' '), React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 13\n    }\n  }, userData.name)), React.createElement(Divider, {\n    style: {\n      borderBottomColor: Colors.secondary\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 11\n    }\n  }), React.createElement(View, {\n    style: styles.paymentsContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 11\n    }\n  }, React.createElement(ScrollView, {\n    style: styles.paymentsContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 13\n    }\n  }, renderOpenedPayments()), React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 13\n    }\n  }, renderClosedPayments())))));\n};\n\nexport var consumerPaymentsScreenOptions = function consumerPaymentsScreenOptions(_ref2) {\n  var navigation = _ref2.navigation,\n      route = _ref2.route;\n  return {\n    headerTitle: function headerTitle() {\n      return React.createElement(View, {\n        style: styles.header,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 7\n        }\n      }, React.createElement(HeaderTitle, {\n        title: \"Pagamentos\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 9\n        }\n      }));\n    },\n    headerLeft: function headerLeft() {\n      if (route.params.userRole === GLOBALS.USER.ROLE.CONSUMER) {\n        return null;\n      }\n\n      return React.createElement(TouchableOpacity, {\n        onPress: function onPress() {\n          return navigation.goBack();\n        },\n        style: styles.headerLeft,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 9\n        }\n      }, React.createElement(Text, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 11\n        }\n      }, React.createElement(BackArrow, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 13\n        }\n      })));\n    },\n    headerStyle: {\n      backgroundColor: 'transparent',\n      elevation: 0,\n      shadowOpacity: 0,\n      borderBottomWidth: 0\n    }\n  };\n};\nvar styles = StyleSheet.create({\n  screen: screen,\n  container: {\n    flex: 1,\n    margin: 20\n  },\n  titleContainer: {\n    alignItems: 'center',\n    alignContent: 'center'\n  },\n  title: {\n    fontFamily: 'Roboto',\n    fontWeight: '700',\n    fontSize: 24,\n    color: '#BB2525',\n    textShadowColor: 'rgba(0, 0, 0, 0.35)',\n    textShadowOffset: {\n      width: -1,\n      height: 3\n    },\n    textShadowRadius: 10\n  },\n  openedPayments: {\n    marginBottom: 10\n  },\n  paymentsContainer: {\n    marginTop: 5\n  },\n  paymentContainer: {\n    marginTop: 15,\n    marginBottom: 15\n  },\n  dateContainer: {\n    flexDirection: 'row'\n  },\n  imageIcon: {\n    marginLeft: 10,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  payLine: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginLeft: 10,\n    marginRight: 10\n  },\n  paymentNote: {\n    color: Colors.tertiary,\n    marginLeft: 10\n  },\n  buttonContainer: {\n    position: 'absolute',\n    width: '100%',\n    bottom: 0\n  },\n  imageContainer: {\n    flexDirection: 'row',\n    margin: 10,\n    alignItems: 'center'\n  },\n  image: {\n    flex: 1,\n    width: 200,\n    height: 200,\n    resizeMode: 'contain'\n  },\n  documentContainer: {\n    flexDirection: 'row',\n    margin: 10,\n    alignItems: 'center',\n    height: 200\n  },\n  header: {\n    alignItems: 'flex-start'\n  },\n  headerLeft: {\n    padding: 10\n  }\n});\nexport default ConsumerPaymentsScreen;","map":{"version":3,"sources":["/home/bordi/projects/cestas-cooperflora-rn/src/screens/consumer/ConsumerPaymentsScreen.js"],"names":["React","useEffect","useState","useContext","format","Entypo","HeaderTitle","BackArrow","Divider","Colors","Context","userContext","GLOBALS","stardardScreenStyle","screen","TextContent","TextLabel","Number","accessibilityLabel","fetchPayments","RenderImageReceipt","RenderPdfReceipt","ConsumerPaymentsScreen","route","navigation","isLoading","setIsLoading","userData","setUserData","userPayments","setUserPayments","paymentsOpened","setPaymentsOpened","refreshing","setRefreshing","userId","params","getUserById","handleFetchPayments","COLLECTION","USERS","SUB_COLLECTION","PAYMENTS","then","data","openedPayments","filter","payment","status","PAYMENT","STATUS","OPENED","length","catch","error","console","log","Alert","alert","unsubscribe","addListener","showImage","index","newUserPayments","showReceiptImage","renderReceipt","userPayment","receipt","type","url","styles","imageContainer","renderClosedPayments","closedPayments","alignSelf","color","map","date","COMPLETED","paymentContainer","dateContainer","dateText","FORMAT","DEFAULT_DATE_TIME","button","imageIcon","primary","payLine","totalToBePaid","toFixed","paymentNote","borderBottomColor","tertiary","renderOpenedPayments","navigate","image","uri","receiptImage","centered","container","titleContainer","title","balance","name","secondary","paymentsContainer","consumerPaymentsScreenOptions","headerTitle","header","headerLeft","userRole","USER","ROLE","CONSUMER","goBack","headerStyle","backgroundColor","elevation","shadowOpacity","borderBottomWidth","StyleSheet","create","flex","margin","alignItems","alignContent","fontFamily","fontWeight","fontSize","textShadowColor","textShadowOffset","width","height","textShadowRadius","marginBottom","marginTop","flexDirection","marginLeft","justifyContent","marginRight","buttonContainer","position","bottom","resizeMode","documentContainer","padding"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\nimport { format } from 'date-fns';\nimport {\n  StyleSheet,\n  Text,\n  ScrollView,\n  View,\n  TouchableOpacity,\n  ActivityIndicator,\n  Image,\n  RefreshControl,\n  Alert,\n} from 'react-native';\nimport { Entypo } from '@expo/vector-icons';\nimport HeaderTitle from '../../components/HeaderTitle';\nimport BackArrow from '../../components/BackArrow';\nimport Divider from '../../components/Divider';\nimport Colors from '../../constants/Colors';\nimport { Context as userContext } from '../../context/UserContext';\nimport GLOBALS from '../../Globals';\nimport { stardardScreenStyle as screen } from '../screenstyles/ScreenStyles';\nimport {\n  TextContent,\n  TextLabel,\n  Number,\n} from '../../components/StandardStyles';\nimport { accessibilityLabel } from '../../utils';\nimport { fetchPayments } from '../../api/firebase';\nimport RenderImageReceipt from '../../components/RenderImageReceipt';\nimport RenderPdfReceipt from '../../components/RenderPdfReceipt';\n\nconst ConsumerPaymentsScreen = ({ route, navigation }) => {\n  // console.log('[ConsumerPaymentsScreen started]');\n  const [isLoading, setIsLoading] = useState(true);\n  const [userData, setUserData] = useState();\n  const [userPayments, setUserPayments] = useState([]);\n  const [paymentsOpened, setPaymentsOpened] = useState(false);\n  const [refreshing, setRefreshing] = useState(false);\n\n  const { userId } = route.params;\n\n  const { getUserById } = useContext(userContext);\n\n  const handleFetchPayments = () => {\n    setPaymentsOpened(false);\n    setIsLoading(false);\n    fetchPayments(\n      GLOBALS.COLLECTION.USERS,\n      GLOBALS.SUB_COLLECTION.PAYMENTS,\n      userId\n    )\n      .then((data) => {\n        const openedPayments = data.filter(\n          (payment) => payment.status === GLOBALS.PAYMENT.STATUS.OPENED\n        );\n        // eslint-disable-next-line no-unused-expressions\n        openedPayments.length > 0 ? setPaymentsOpened(true) : null;\n        setUserPayments(data);\n        setIsLoading(false);\n      })\n      .catch((error) => {\n        console.log('Erro dentro do catch do Consumer Payments Screen', error);\n        Alert.alert('Erro ao carregar os seus pagamentos!', error);\n      });\n  };\n\n  useEffect(() => {\n    const unsubscribe = navigation.addListener('focus', () => {\n      setIsLoading(true);\n      if (userId) {\n        getUserById(userId).then((data) => {\n          setUserData(data);\n          // fetchPayments();\n          handleFetchPayments();\n          setIsLoading(false);\n        });\n      }\n    });\n    // Return the function to unsubscribe from the event so it gets removed on unmount\n    return unsubscribe;\n  }, [navigation, userId]);\n\n  const showImage = (index) => {\n    const newUserPayments = [...userPayments];\n    newUserPayments[index].showReceiptImage =\n      !newUserPayments[index].showReceiptImage;\n    setUserPayments(newUserPayments);\n  };\n\n  const renderReceipt = (userPayment) => {\n    if (userPayment.showReceiptImage) {\n      if (\n        userPayment.receipt.type === 'image/jpeg' ||\n        userPayment.receipt.type === 'image/png'\n      ) {\n        console.log(userPayment.receipt.url);\n        return (\n          <View style={styles.imageContainer}>\n            <RenderImageReceipt imageUrl={userPayment.receipt.url} />\n          </View>\n        );\n      }\n      if (userPayment.receipt.type === 'application/pdf') {\n        return <RenderPdfReceipt documentUrl={userPayment.receipt.url} />;\n      }\n    }\n    return null;\n  };\n\n  const renderClosedPayments = () => {\n    return (\n      <View style={styles.closedPayments}>\n        <TextLabel style={{ alignSelf: 'center', color: '#BB2525' }}>\n          Pagamentos Concluídos\n        </TextLabel>\n        {userPayments.map((userPayment, index) => (\n          <View key={userPayment.date}>\n            {userPayment.status === GLOBALS.PAYMENT.STATUS.COMPLETED ? (\n              <View key={userPayment.date}>\n                <View style={styles.paymentContainer}>\n                  <View style={styles.dateContainer}>\n                    <TextLabel style={styles.dateText}>\n                      {format(\n                        userPayment.date,\n                        GLOBALS.FORMAT.DEFAULT_DATE_TIME\n                      )}\n                    </TextLabel>\n                    <TouchableOpacity\n                      style={styles.button}\n                      onPress={() => showImage(index)}\n                      {...accessibilityLabel(`showImageClosedPayment${index}`)}\n                    >\n                      <View style={styles.imageIcon}>\n                        <Entypo\n                          name=\"attachment\"\n                          size={24}\n                          color={Colors.primary}\n                        />\n                      </View>\n                    </TouchableOpacity>\n                  </View>\n                  <View style={styles.payLine}>\n                    <TextContent>Pagamento Realizado</TextContent>\n                    <Number>R$ {userPayment.totalToBePaid.toFixed(2)}</Number>\n                  </View>\n                  <View>\n                    {userPayment.paymentNote ? (\n                      <Text style={styles.paymentNote}>\n                        Obs: {userPayment.paymentNote}\n                      </Text>\n                    ) : null}\n                  </View>\n                </View>\n                {renderReceipt(userPayment)}\n                <Divider style={{ borderBottomColor: Colors.tertiary }} />\n              </View>\n            ) : null}\n          </View>\n        ))}\n      </View>\n    );\n  };\n\n  const renderOpenedPayments = () => {\n    return (\n      <View style={styles.openedPayments}>\n        {!paymentsOpened ? (\n          <TextLabel style={{ alignSelf: 'center' }}>\n            Não existem pagamentos a serem feitos!\n          </TextLabel>\n        ) : (\n          <View>\n            <TextLabel style={{ alignSelf: 'center', color: '#BB2525' }}>\n              Pagamentos abertos.\n            </TextLabel>\n            <TextLabel style={{ alignSelf: 'center', color: '#BB2525' }}>\n              Clique sobre o item para pagar.\n            </TextLabel>\n            {userPayments.map((userPayment, index) => {\n              return (\n                <TouchableOpacity\n                  key={userPayment.date}\n                  onPress={() => {\n                    navigation.navigate('ConsumerAddPaymentScreen', {\n                      // eslint-disable-next-line object-shorthand\n                      userPayment: userPayment,\n                    });\n                  }}\n                  {...accessibilityLabel(`showImageOpenedPayment${index}`)}\n                >\n                  {userPayment.status === GLOBALS.PAYMENT.STATUS.OPENED ? (\n                    <View key={userPayment.date}>\n                      <View style={styles.paymentContainer}>\n                        <View style={styles.dateContainer}>\n                          <TextLabel>\n                            {format(\n                              userPayment.date,\n                              GLOBALS.FORMAT.DEFAULT_DATE_TIME\n                            )}\n                          </TextLabel>\n                        </View>\n                        <View style={styles.payLine}>\n                          <TextContent>Valor a ser pago</TextContent>\n                          <Number>\n                            R$ {userPayment.totalToBePaid.toFixed(2)}\n                          </Number>\n                        </View>\n                      </View>\n                      {userPayment.showReceiptImage ? (\n                        <View style={styles.imageContainer}>\n                          <Image\n                            style={styles.image}\n                            source={{ uri: userPayment.receiptImage }}\n                          />\n                        </View>\n                      ) : null}\n                      <Divider style={{ borderBottomColor: Colors.tertiary }} />\n                    </View>\n                  ) : null}\n                </TouchableOpacity>\n              );\n            })}\n          </View>\n        )}\n      </View>\n    );\n  };\n\n  if (isLoading) {\n    return (\n      <View style={styles.centered}>\n        <ActivityIndicator size=\"large\" color={Colors.primary} />\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.screen}>\n      <View style={styles.container}>\n        <ScrollView\n          refreshControl={\n            <RefreshControl\n              refreshing={refreshing}\n              onRefresh={() => {\n                setRefreshing(true);\n                handleFetchPayments();\n                setRefreshing(false);\n              }}\n            />\n          }\n        >\n          <View style={styles.titleContainer}>\n            <Text style={styles.title}>\n              Saldo: {userData.balance.toFixed(2)}{' '}\n            </Text>\n            <Text>{userData.name}</Text>\n          </View>\n          <Divider style={{ borderBottomColor: Colors.secondary }} />\n          <View style={styles.paymentsContainer}>\n            <ScrollView style={styles.paymentsContainer}>\n              {renderOpenedPayments()}\n            </ScrollView>\n            <View>{renderClosedPayments()}</View>\n          </View>\n        </ScrollView>\n      </View>\n    </View>\n  );\n};\n\nexport const consumerPaymentsScreenOptions = ({ navigation, route }) => {\n  return {\n    headerTitle: () => (\n      <View style={styles.header}>\n        <HeaderTitle title=\"Pagamentos\" />\n      </View>\n    ),\n    headerLeft: () => {\n      if (route.params.userRole === GLOBALS.USER.ROLE.CONSUMER) {\n        return null;\n      }\n      return (\n        <TouchableOpacity\n          onPress={() => navigation.goBack()}\n          style={styles.headerLeft}\n        >\n          <Text>\n            <BackArrow />\n          </Text>\n        </TouchableOpacity>\n      );\n    },\n    headerStyle: {\n      backgroundColor: 'transparent',\n      elevation: 0,\n      shadowOpacity: 0,\n      borderBottomWidth: 0,\n    },\n  };\n};\n\nconst styles = StyleSheet.create({\n  screen,\n  container: {\n    flex: 1,\n    margin: 20,\n  },\n  titleContainer: {\n    alignItems: 'center',\n    alignContent: 'center',\n  },\n  title: {\n    fontFamily: 'Roboto',\n    fontWeight: '700',\n    fontSize: 24,\n    color: '#BB2525',\n    textShadowColor: 'rgba(0, 0, 0, 0.35)',\n    textShadowOffset: { width: -1, height: 3 },\n    textShadowRadius: 10,\n  },\n  openedPayments: {\n    marginBottom: 10,\n  },\n  paymentsContainer: {\n    marginTop: 5,\n  },\n  paymentContainer: {\n    marginTop: 15,\n    marginBottom: 15,\n  },\n  dateContainer: {\n    flexDirection: 'row',\n  },\n  imageIcon: {\n    marginLeft: 10,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  payLine: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginLeft: 10,\n    marginRight: 10,\n  },\n  paymentNote: {\n    color: Colors.tertiary,\n    marginLeft: 10,\n  },\n  buttonContainer: {\n    position: 'absolute',\n    width: '100%',\n    bottom: 0,\n  },\n  imageContainer: {\n    flexDirection: 'row',\n    margin: 10,\n    alignItems: 'center',\n    // height: 200,\n  },\n  image: {\n    flex: 1,\n    width: 200,\n    height: 200,\n    resizeMode: 'contain',\n  },\n  documentContainer: {\n    flexDirection: 'row',\n    margin: 10,\n    alignItems: 'center',\n    height: 200,\n  },\n  header: {\n    alignItems: 'flex-start',\n  },\n  headerLeft: {\n    padding: 10,\n  },\n});\n\nexport default ConsumerPaymentsScreen;\n"]},"metadata":{},"sourceType":"module"}