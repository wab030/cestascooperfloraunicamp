{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/bordi/projects/cestas-cooperflora-rn/src/screens/UpdatePasswordScreen.js\";\n\nimport React, { useContext, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Spacer from \"../components/Spacer\";\nimport FormInput from \"../components/FormInput\";\nimport Button from \"../components/Button\";\nimport Divider from \"../components/Divider\";\nimport { Context as AuthContext } from \"../context/AuthContext\";\nimport HeaderTitle from \"../components/HeaderTitle\";\nimport BackArrow from \"../components/BackArrow\";\nimport Spinner from \"../components/Spinner\";\nimport Colors from \"../constants/Colors\";\nimport { stardardScreenStyle as screen } from \"./screenstyles/ScreenStyles\";\n\nvar UpdatePasswordScreen = function UpdatePasswordScreen(_ref) {\n  var route = _ref.route;\n  var email = route.params.userEmail;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      password = _useState2[0],\n      setPassword = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      newPassword = _useState4[0],\n      setNewPassword = _useState4[1];\n\n  var _useContext = useContext(AuthContext),\n      state = _useContext.state,\n      updatePassword = _useContext.updatePassword,\n      clearError = _useContext.clearError;\n\n  var newPasswordTextInput = React.createRef();\n\n  var updateUserPassword = function updateUserPassword() {\n    updatePassword(email, password, newPassword);\n  };\n\n  var renderButton = function renderButton() {\n    return state.loading ? React.createElement(Spinner, {\n      size: \"small\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 7\n      }\n    }) : React.createElement(View, {\n      style: styles.confirmContainer,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 7\n      }\n    }, React.createElement(Divider, {\n      style: {\n        borderBottomColor: Colors.secondary\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }\n    }), React.createElement(Button, {\n      id: \"updateUserPasswordButton\",\n      style: styles.confirmButton,\n      textColor: \"white\",\n      onPress: updateUserPassword,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }\n    }, \"Atualizar Senha\"));\n  };\n\n  return React.createElement(View, {\n    style: styles.screen,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, React.createElement(TouchableWithoutFeedback, {\n    onPress: Keyboard.dismiss,\n    accessible: false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, React.createElement(KeyboardAvoidingView, {\n    style: {\n      flex: 1,\n      flexDirection: 'column',\n      justifyContent: 'center'\n    },\n    behavior: Platform.OS === 'ios' ? 'padding' : 'height',\n    enabled: true,\n    keyboardVerticalOffset: 100,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }, React.createElement(ScrollView, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, React.createElement(Spacer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 15\n    }\n  }), React.createElement(FormInput, {\n    id: \"currentpassword\",\n    label: \"Digite sua senha atual:\",\n    value: password,\n    returnKeyType: \"next\",\n    onChangeText: function onChangeText(password) {\n      setPassword(password);\n\n      if (state.errorMessage) {\n        clearError();\n      }\n    },\n    onSubmitEditing: function onSubmitEditing() {\n      return newPasswordTextInput.current.focus();\n    },\n    autoCapitalize: \"words\",\n    autoCorrect: false,\n    secureTextEntry: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 15\n    }\n  }), React.createElement(Spacer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 15\n    }\n  }), React.createElement(FormInput, {\n    id: \"newpassword\",\n    label: \"Nova senha:\",\n    value: newPassword,\n    reference: newPasswordTextInput,\n    returnKeyType: \"done\",\n    onChangeText: function onChangeText(newPassword) {\n      setNewPassword(newPassword);\n\n      if (state.errorMessage) {\n        clearError();\n      }\n    },\n    autoCapitalize: \"none\",\n    autoCorrect: false,\n    secureTextEntry: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 15\n    }\n  }), state.errorMessage ? React.createElement(Text, {\n    style: styles.errorMessage,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }\n  }, state.errorMessage) : null, React.createElement(Spacer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 15\n    }\n  })))), renderButton()));\n};\n\nexport var updatePasswordScreenOptions = function updatePasswordScreenOptions() {\n  return {\n    headerTitle: function headerTitle() {\n      return React.createElement(View, {\n        style: styles.header,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 7\n        }\n      }, React.createElement(HeaderTitle, {\n        title: \"Atualizar Senha\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 9\n        }\n      }));\n    },\n    headerBackImage: function headerBackImage() {\n      return React.createElement(BackArrow, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 28\n        }\n      });\n    },\n    headerStyle: {\n      backgroundColor: 'transparent',\n      elevation: 0,\n      shadowOpacity: 0,\n      borderBottomWidth: 0\n    }\n  };\n};\nvar styles = StyleSheet.create({\n  screen: screen,\n  container: {\n    flex: 1,\n    margin: 25\n  },\n  errorMessage: {\n    fontSize: 16,\n    color: 'red',\n    marginLeft: 15\n  },\n  confirmContainer: {\n    position: 'absolute',\n    width: '100%',\n    bottom: 0\n  },\n  confirmButton: {\n    marginTop: 5,\n    backgroundColor: Colors.primary,\n    alignSelf: 'center'\n  },\n  header: {\n    alignItems: 'flex-start'\n  }\n});\nexport default UpdatePasswordScreen;","map":{"version":3,"sources":["/home/bordi/projects/cestas-cooperflora-rn/src/screens/UpdatePasswordScreen.js"],"names":["React","useContext","useState","Spacer","FormInput","Button","Divider","Context","AuthContext","HeaderTitle","BackArrow","Spinner","Colors","stardardScreenStyle","screen","UpdatePasswordScreen","route","email","params","userEmail","password","setPassword","newPassword","setNewPassword","state","updatePassword","clearError","newPasswordTextInput","createRef","updateUserPassword","renderButton","loading","styles","confirmContainer","borderBottomColor","secondary","confirmButton","container","Keyboard","dismiss","flex","flexDirection","justifyContent","Platform","OS","errorMessage","current","focus","updatePasswordScreenOptions","headerTitle","header","headerBackImage","headerStyle","backgroundColor","elevation","shadowOpacity","borderBottomWidth","StyleSheet","create","margin","fontSize","color","marginLeft","position","width","bottom","marginTop","primary","alignSelf","alignItems"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react';\nimport {\n  View,\n  Text,\n  Keyboard,\n  KeyboardAvoidingView,\n  ScrollView,\n  StyleSheet,\n  TouchableWithoutFeedback,\n  Platform,\n} from 'react-native';\nimport Spacer from '../components/Spacer';\nimport FormInput from '../components/FormInput';\nimport Button from '../components/Button';\nimport Divider from '../components/Divider';\nimport { Context as AuthContext } from '../context/AuthContext';\nimport HeaderTitle from '../components/HeaderTitle';\nimport BackArrow from '../components/BackArrow';\nimport Spinner from '../components/Spinner';\nimport Colors from '../constants/Colors';\nimport { stardardScreenStyle as screen } from './screenstyles/ScreenStyles';\n\nconst UpdatePasswordScreen = ({ route }) => {\n  const email = route.params.userEmail;\n  const [password, setPassword] = useState('');\n  const [newPassword, setNewPassword] = useState('');\n  const { state, updatePassword, clearError } = useContext(AuthContext);\n\n  const newPasswordTextInput = React.createRef();\n\n  const updateUserPassword = () => {\n    updatePassword(email, password, newPassword);\n  };\n\n  const renderButton = () => {\n    return state.loading ? (\n      <Spinner size=\"small\" />\n    ) : (\n      <View style={styles.confirmContainer}>\n        <Divider style={{ borderBottomColor: Colors.secondary }} />\n        <Button\n          id=\"updateUserPasswordButton\"\n          style={styles.confirmButton}\n          textColor=\"white\"\n          onPress={updateUserPassword}\n        >\n          Atualizar Senha\n        </Button>\n      </View>\n    );\n  };\n\n  return (\n    <View style={styles.screen}>\n      <View style={styles.container}>\n        <TouchableWithoutFeedback onPress={Keyboard.dismiss} accessible={false}>\n          <KeyboardAvoidingView\n            style={{\n              flex: 1,\n              flexDirection: 'column',\n              justifyContent: 'center',\n            }}\n            behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n            enabled\n            keyboardVerticalOffset={100}\n          >\n            <ScrollView>\n              <Spacer />\n              <FormInput\n                id=\"currentpassword\"\n                label=\"Digite sua senha atual:\"\n                value={password}\n                returnKeyType=\"next\"\n                onChangeText={(password) => {\n                  setPassword(password);\n                  if (state.errorMessage) {\n                    clearError();\n                  }\n                }}\n                onSubmitEditing={() => newPasswordTextInput.current.focus()}\n                autoCapitalize=\"words\"\n                autoCorrect={false}\n                secureTextEntry\n              />\n              <Spacer />\n              <FormInput\n                id=\"newpassword\"\n                label=\"Nova senha:\"\n                value={newPassword}\n                reference={newPasswordTextInput}\n                returnKeyType=\"done\"\n                onChangeText={(newPassword) => {\n                  setNewPassword(newPassword);\n                  if (state.errorMessage) {\n                    clearError();\n                  }\n                }}\n                autoCapitalize=\"none\"\n                autoCorrect={false}\n                secureTextEntry\n              />\n              {state.errorMessage ? (\n                <Text style={styles.errorMessage}>{state.errorMessage}</Text>\n              ) : null}\n              <Spacer />\n            </ScrollView>\n          </KeyboardAvoidingView>\n        </TouchableWithoutFeedback>\n        {renderButton()}\n      </View>\n    </View>\n  );\n};\n\nexport const updatePasswordScreenOptions = () => {\n  return {\n    headerTitle: () => (\n      <View style={styles.header}>\n        <HeaderTitle title=\"Atualizar Senha\" />\n      </View>\n    ),\n    headerBackImage: () => <BackArrow />,\n    headerStyle: {\n      backgroundColor: 'transparent',\n      elevation: 0,\n      shadowOpacity: 0,\n      borderBottomWidth: 0,\n    },\n  };\n};\n\nconst styles = StyleSheet.create({\n  screen,\n  container: {\n    flex: 1,\n    margin: 25,\n  },\n  errorMessage: {\n    fontSize: 16,\n    color: 'red',\n    marginLeft: 15,\n  },\n  confirmContainer: {\n    position: 'absolute',\n    width: '100%',\n    bottom: 0,\n  },\n  confirmButton: {\n    marginTop: 5,\n    backgroundColor: Colors.primary,\n    alignSelf: 'center',\n  },\n  header: {\n    alignItems: 'flex-start',\n  },\n});\n\nexport default UpdatePasswordScreen;\n"]},"metadata":{},"sourceType":"module"}